{"version":3,"file":"static/chunks/411.a65a8d19827546e9.js","mappings":"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","sources":["webpack://_N_E/../ui-core/src/overview/OverviewAssetsRoot.tsx","webpack://_N_E/../ui-core/src/overview/OverviewTabs.tsx","webpack://_N_E/../ui-core/src/instance/RepoFilterButton.tsx","webpack://_N_E/../ui-core/src/runs/useHourWindow.tsx","webpack://_N_E/../ui-core/src/instance/NextTick.tsx","webpack://_N_E/../ui-core/src/runs/useRunsForTimeline.tsx","webpack://_N_E/../ui-core/src/overview/OverviewTimelineRoot.tsx","webpack://_N_E/../ui-core/src/overview/OverviewActivityRoot.tsx","webpack://_N_E/../ui-core/src/overview/OverviewJobsTable.tsx","webpack://_N_E/../ui-core/src/overview/sortRepoBuckets.tsx","webpack://_N_E/../ui-core/src/overview/visibleRepoKeys.tsx","webpack://_N_E/../ui-components/src/components/useDelayedState.tsx","webpack://_N_E/../ui-core/src/ui/SearchInputSpinner.tsx","webpack://_N_E/../ui-core/src/overview/OverviewJobsRoot.tsx","webpack://_N_E/../ui-core/src/overview/OverviewResourcesTable.tsx","webpack://_N_E/../ui-core/src/overview/OverviewResourcesRoot.tsx","webpack://_N_E/../ui-core/src/overview/OverviewSchedulesTable.tsx","webpack://_N_E/../ui-core/src/overview/OverviewSchedulesRoot.tsx","webpack://_N_E/../ui-core/src/overview/OverviewSensorsTable.tsx","webpack://_N_E/../ui-core/src/overview/OverviewSensorsRoot.tsx","webpack://_N_E/../ui-core/src/assets/auto-materialization/InstanceAutomaterializationEvaluationHistoryTable.tsx","webpack://_N_E/../ui-core/src/assets/auto-materialization/AutomaterializationRoot.tsx","webpack://_N_E/../ui-core/src/instance/InstanceBackfills.tsx","webpack://_N_E/../ui-core/src/instance/backfill/BackfillPage.tsx","webpack://_N_E/../ui-core/src/overview/OverviewRoot.tsx","webpack://_N_E/<anon>"],"sourcesContent":["import {useQuery} from '@apollo/client';\nimport {\n  Box,\n  Caption,\n  Colors,\n  Icon,\n  MenuItem,\n  Select,\n  Spinner,\n  Tag,\n  TextInput,\n  useViewport,\n} from '@dagster-io/ui-components';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useAssetsLiveData} from '../asset-data/AssetLiveDataProvider';\nimport {StatusCase, buildAssetNodeStatusContent} from '../asset-graph/AssetNodeStatusContent';\nimport {displayNameForAssetKey} from '../asset-graph/Utils';\nimport {groupAssetsByStatus} from '../asset-graph/util';\nimport {partitionCountString} from '../assets/AssetNodePartitionCounts';\nimport {ASSET_CATALOG_TABLE_QUERY} from '../assets/AssetsCatalogTable';\nimport {assetDetailsPathForKey} from '../assets/assetDetailsPathForKey';\nimport {\n  AssetCatalogTableQuery,\n  AssetCatalogTableQueryVariables,\n} from '../assets/types/AssetsCatalogTable.types';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {RepositoryLink} from '../nav/RepositoryLink';\nimport {Container, HeaderCell, Inner, Row, RowCell} from '../ui/VirtualizedTable';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\ntype Props = {\n  Header: React.ComponentType<{refreshState: ReturnType<typeof useQueryRefreshAtInterval>}>;\n  TabButton: React.ComponentType<{selected: 'timeline' | 'assets'}>;\n};\nexport const OverviewAssetsRoot = ({Header, TabButton}: Props) => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Assets');\n\n  const query = useQuery<AssetCatalogTableQuery, AssetCatalogTableQueryVariables>(\n    ASSET_CATALOG_TABLE_QUERY,\n    {\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n  const refreshState = useQueryRefreshAtInterval(query, FIFTEEN_SECONDS);\n\n  const groupedAssetsUnfiltered = React.useMemo(() => {\n    if (query.data?.assetsOrError.__typename === 'AssetConnection') {\n      const assets = query.data.assetsOrError.nodes;\n      return groupAssets(assets);\n    }\n    return [];\n  }, [query.data?.assetsOrError]);\n\n  const [searchValue, setSearchValue] = useQueryPersistedState<string>({\n    queryKey: 'q',\n    decode: (qs) => (qs.searchQuery ? JSON.parse(qs.searchQuery) : ''),\n    encode: (searchQuery) => ({searchQuery: searchQuery ? JSON.stringify(searchQuery) : undefined}),\n  });\n\n  const groupedAssets = React.useMemo(() => {\n    if (searchValue === '') {\n      return groupedAssetsUnfiltered;\n    }\n    return groupedAssetsUnfiltered.filter((group) => {\n      return (\n        (group.groupName || UNGROUPED_ASSETS).toLowerCase().includes(searchValue.toLowerCase()) ||\n        group.repositoryName.toLowerCase().includes(searchValue.toLowerCase())\n      );\n    });\n  }, [groupedAssetsUnfiltered, searchValue]);\n\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n\n  const rowVirtualizer = useVirtualizer({\n    count: groupedAssets.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: () => 82,\n    overscan: 5,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  function content() {\n    const result = query.data?.assetsOrError;\n    if (!query.data && query.loading) {\n      return (\n        <Box\n          flex={{alignItems: 'center', justifyContent: 'center', direction: 'column', grow: 1}}\n          style={{width: '100%'}}\n        >\n          <Spinner purpose=\"page\" />\n        </Box>\n      );\n    }\n    if (result?.__typename === 'PythonError') {\n      return (\n        <Box\n          flex={{alignItems: 'center', justifyContent: 'center', direction: 'column', grow: 1}}\n          style={{width: '100%'}}\n        >\n          <PythonErrorInfo error={result} />\n        </Box>\n      );\n    }\n\n    return (\n      <Box flex={{direction: 'column'}} style={{overflow: 'hidden'}}>\n        <Container ref={parentRef}>\n          <VirtualHeaderRow />\n          <Inner $totalHeight={totalHeight}>\n            {items.map(({index, key, size, start}) => {\n              const group = groupedAssets[index]!;\n              return <VirtualRow key={key} start={start} height={size} group={group} />;\n            })}\n          </Inner>\n        </Container>\n      </Box>\n    );\n  }\n\n  return (\n    <>\n      <div style={{position: 'sticky', top: 0, zIndex: 1}}>\n        <Header refreshState={refreshState} />\n        <Box\n          padding={{horizontal: 24, vertical: 16}}\n          flex={{alignItems: 'center', gap: 12, grow: 0}}\n        >\n          <TabButton selected=\"assets\" />\n          <TextInput\n            value={searchValue}\n            onChange={(e) => {\n              setSearchValue(e.target.value);\n            }}\n            placeholder=\"Filter asset groups…\"\n          />\n        </Box>\n      </div>\n      {content()}\n    </>\n  );\n};\n\ntype Assets = Extract<\n  AssetCatalogTableQuery['assetsOrError'],\n  {__typename: 'AssetConnection'}\n>['nodes'];\n\nfunction groupAssets(assets: Assets) {\n  const groups: Record<\n    string,\n    {\n      groupName: string | null;\n      repositoryName: string;\n      assets: Assets;\n    }\n  > = {};\n\n  assets.forEach((asset) => {\n    if (!asset.definition) {\n      return;\n    }\n    const groupName = asset.definition.groupName;\n    const repositoryName = asset.definition.repository.name;\n    const key = `${groupName}||${repositoryName}`;\n    const target = groups[key] || {\n      groupName,\n      repositoryName,\n      assets: [] as Assets,\n    };\n    target.assets.push(asset);\n    groups[key] = target;\n  });\n  return Object.values(groups);\n}\n\nconst TEMPLATE_COLUMNS = '5fr 1fr 1fr 1fr 1fr';\n\nfunction VirtualHeaderRow() {\n  return (\n    <Box\n      border=\"top-and-bottom\"\n      style={{\n        display: 'grid',\n        gridTemplateColumns: TEMPLATE_COLUMNS,\n        height: '32px',\n        fontSize: '12px',\n        color: Colors.textLight(),\n        position: 'sticky',\n        top: 0,\n        zIndex: 1,\n        background: Colors.backgroundDefault(),\n      }}\n    >\n      <HeaderCell>Group name</HeaderCell>\n      <HeaderCell>Missing</HeaderCell>\n      <HeaderCell>Failed/Overdue</HeaderCell>\n      <HeaderCell>In progress</HeaderCell>\n      <HeaderCell>Materialized</HeaderCell>\n    </Box>\n  );\n}\n\nconst UNGROUPED_ASSETS = 'Ungrouped Assets';\ntype RowProps = {\n  height: number;\n  start: number;\n  group: ReturnType<typeof groupAssets>[0];\n};\nfunction VirtualRow({height, start, group}: RowProps) {\n  const assetKeys = React.useMemo(\n    () => group.assets.map((asset) => ({path: asset.key.path})),\n    [group.assets],\n  );\n\n  const {liveDataByNode} = useAssetsLiveData(assetKeys);\n\n  const statuses = React.useMemo(() => {\n    return groupAssetsByStatus(group.assets, liveDataByNode);\n  }, [liveDataByNode, group.assets]);\n\n  const repo = group.assets.find((asset) => asset.definition?.repository)?.definition?.repository;\n  const repoAddress = buildRepoAddress(repo?.name || '', repo?.location.name || '');\n\n  const {containerProps, viewport} = useViewport();\n\n  const isBatchStillLoading = assetKeys.length !== Object.keys(liveDataByNode).length;\n  const zeroOrBlank = isBatchStillLoading ? '' : '0';\n\n  return (\n    <Row $height={height} $start={start}>\n      <RowGrid border=\"bottom\">\n        <Cell>\n          <Box flex={{direction: 'row', justifyContent: 'space-between', grow: 1}}>\n            <Box flex={{direction: 'column', gap: 2, grow: 1}}>\n              <Box flex={{direction: 'row', gap: 8}}>\n                <Icon name=\"asset_group\" />\n                {group.groupName ? (\n                  <Link\n                    style={{fontWeight: 700}}\n                    to={workspacePathFromAddress(repoAddress, `/asset-groups/${group.groupName}`)}\n                  >\n                    {group.groupName}\n                  </Link>\n                ) : (\n                  UNGROUPED_ASSETS\n                )}\n              </Box>\n              <div {...containerProps}>\n                <RepositoryLinkWrapper maxWidth={viewport.width}>\n                  <RepositoryLink repoAddress={repoAddress} showRefresh={false} />\n                </RepositoryLinkWrapper>\n              </div>\n            </Box>\n            <Box flex={{direction: 'column', justifyContent: 'center'}}>\n              {isBatchStillLoading ? <Spinner purpose=\"body-text\" /> : null}\n            </Box>\n          </Box>\n        </Cell>\n        <Cell>\n          {statuses.missing.length ? (\n            <SelectOnHover\n              assets={statuses.missing}\n              getCount={({status}) => {\n                if (status.case === StatusCase.PARTITIONS_MISSING) {\n                  return status.numMissing || 0;\n                }\n                return 0;\n              }}\n              adjective=\"missing\"\n            >\n              <Tag intent=\"none\">\n                <Box flex={{direction: 'row', alignItems: 'center', gap: 6}}>\n                  <div\n                    style={{\n                      width: '12px',\n                      height: '12px',\n                      border: `2px solid ${Colors.borderDefault()}`,\n                      borderRadius: '50%',\n                    }}\n                  />\n                  {statuses.missing.length}\n                </Box>\n              </Tag>\n            </SelectOnHover>\n          ) : (\n            zeroOrBlank\n          )}\n        </Cell>\n        <Cell>\n          {statuses.failed.length ? (\n            <SelectOnHover\n              assets={statuses.failed}\n              getCount={({status}) => {\n                if (status.case === StatusCase.PARTITIONS_FAILED) {\n                  return status.numFailed || 0;\n                }\n                return 0;\n              }}\n              adjective=\"failed\"\n            >\n              <Tag intent=\"danger\">\n                <Box flex={{direction: 'row', alignItems: 'center', gap: 6}}>\n                  <div\n                    style={{\n                      width: 0,\n                      height: 0,\n                      borderLeft: '6px solid transparent',\n                      borderRight: '6px solid transparent',\n                      borderBottom: '10px solid red',\n                      display: 'inline-block',\n                    }}\n                  />\n                  {statuses.failed.length}\n                </Box>\n              </Tag>\n            </SelectOnHover>\n          ) : (\n            zeroOrBlank\n          )}\n        </Cell>\n        <Cell>\n          {statuses.inprogress.length ? (\n            <SelectOnHover\n              assets={statuses.inprogress}\n              getCount={({status}) => {\n                if (status.case === StatusCase.MATERIALIZING) {\n                  return status.numMaterializing || 0;\n                }\n                return 0;\n              }}\n              adjective=\"materializing\"\n            >\n              <Tag intent=\"primary\" icon=\"spinner\">\n                {statuses.inprogress.length}\n              </Tag>\n            </SelectOnHover>\n          ) : (\n            zeroOrBlank\n          )}\n        </Cell>\n        <Cell>\n          {statuses.successful.length ? (\n            <SelectOnHover\n              assets={statuses.successful}\n              getCount={({status}) => {\n                if (status.case === StatusCase.PARTITIONS_MATERIALIZED) {\n                  return status.numMaterialized || 0;\n                }\n                return 0;\n              }}\n              adjective=\"materialized\"\n            >\n              <Tag intent=\"success\">\n                <Box flex={{direction: 'row', alignItems: 'center', gap: 6}}>\n                  <div\n                    style={{\n                      backgroundColor: Colors.accentGreen(),\n                      width: '10px',\n                      height: '10px',\n                      borderRadius: '50%',\n                    }}\n                  />\n                  {statuses.successful.length}\n                </Box>\n              </Tag>\n            </SelectOnHover>\n          ) : (\n            zeroOrBlank\n          )}\n        </Cell>\n      </RowGrid>\n    </Row>\n  );\n}\n\nconst RowGrid = styled(Box)`\n  display: grid;\n  grid-template-columns: ${TEMPLATE_COLUMNS};\n  height: 100%;\n  > * {\n    vertical-align: middle;\n  }\n`;\n\nconst Cell = ({children}: {children: React.ReactNode}) => {\n  return (\n    <RowCell style={{color: Colors.textDefault()}}>\n      <Box flex={{direction: 'row', alignItems: 'center', grow: 1}}>{children}</Box>\n    </RowCell>\n  );\n};\n\nconst RepositoryLinkWrapper = styled.div<{maxWidth?: number}>`\n  font-size: 12px;\n  pointer-events: none;\n  a {\n    color: ${Colors.textLight()};\n    pointer-events: none;\n    max-width: ${({maxWidth}) => (maxWidth ? 'unset' : `${maxWidth}px`)};\n  }\n`;\n\ntype AssetWithStatusType = {\n  asset: Assets[0];\n  status: ReturnType<typeof buildAssetNodeStatusContent>;\n};\nfunction SelectOnHover({\n  assets,\n  children,\n  getCount,\n  adjective,\n}: {\n  assets: AssetWithStatusType[];\n  children: React.ReactNode;\n  getCount: (asset: AssetWithStatusType) => number;\n  adjective: string;\n}) {\n  return (\n    <SelectWrapper>\n      <Select\n        items={assets}\n        itemPredicate={(query, item) =>\n          displayNameForAssetKey(item.asset.key)\n            .toLocaleLowerCase()\n            .includes(query.toLocaleLowerCase())\n        }\n        itemRenderer={(item) => {\n          const count = getCount(item);\n          return (\n            <LinkWithNoUnderline to={assetDetailsPathForKey(item.asset.key)} target=\"_blank\">\n              <MenuItem\n                key={displayNameForAssetKey(item.asset.key)}\n                text={\n                  <Box flex={{direction: 'row', alignItems: 'center', gap: 4}}>\n                    <div style={{paddingLeft: '4px'}}>\n                      <Icon name=\"asset\" />\n                    </div>\n                    <div\n                      style={{overflow: 'hidden', whiteSpace: 'nowrap', textOverflow: 'ellipsis'}}\n                    >\n                      {displayNameForAssetKey(item.asset.key)}\n                    </div>\n                    {count && count > 0 ? (\n                      <Caption style={{color: Colors.textLight()}}>\n                        {partitionCountString(count)} {adjective}\n                      </Caption>\n                    ) : null}\n                  </Box>\n                }\n              />\n            </LinkWithNoUnderline>\n          );\n        }}\n        onItemSelect={() => {}}\n      >\n        {children}\n      </Select>\n    </SelectWrapper>\n  );\n}\n\nconst SelectWrapper = styled.div`\n  cursor: pointer;\n  &:hover {\n    font-weight: 600;\n  }\n`;\n\nconst LinkWithNoUnderline = styled(Link)`\n  &:hover {\n    text-decoration: none;\n  }\n`;\n","import {QueryResult} from '@apollo/client';\nimport {Box, Colors, Spinner, Tabs} from '@dagster-io/ui-components';\n\nimport {QueryRefreshCountdown, QueryRefreshState} from '../app/QueryRefresh';\nimport {useAutoMaterializeSensorFlag} from '../assets/AutoMaterializeSensorFlag';\nimport {useAutomaterializeDaemonStatus} from '../assets/useAutomaterializeDaemonStatus';\nimport {TabLink} from '../ui/TabLink';\n\ninterface Props<TData> {\n  refreshState?: QueryRefreshState;\n  queryData?: QueryResult<TData, any>;\n  tab: string;\n}\n\nexport const OverviewTabs = <TData extends Record<string, any>>(props: Props<TData>) => {\n  const {refreshState, tab} = props;\n\n  const automaterialize = useAutomaterializeDaemonStatus();\n  const automaterializeSensorsFlagState = useAutoMaterializeSensorFlag();\n\n  return (\n    <Box flex={{direction: 'row', justifyContent: 'space-between', alignItems: 'flex-end'}}>\n      <Tabs selectedTabId={tab}>\n        <TabLink id=\"activity\" title=\"Activity\" to=\"/overview/activity\" />\n        <TabLink id=\"jobs\" title=\"Jobs\" to=\"/overview/jobs\" />\n        <TabLink id=\"schedules\" title=\"Schedules\" to=\"/overview/schedules\" />\n        <TabLink id=\"sensors\" title=\"Sensors\" to=\"/overview/sensors\" />\n        {automaterializeSensorsFlagState === 'has-global-amp' ? (\n          <TabLink\n            id=\"amp\"\n            title={\n              <Box flex={{direction: 'row', gap: 8, alignItems: 'center'}}>\n                <div>Auto-materialize</div>\n                {automaterialize.loading ? (\n                  <Spinner purpose=\"body-text\" />\n                ) : (\n                  <div\n                    style={{\n                      width: '10px',\n                      height: '10px',\n                      borderRadius: '50%',\n                      backgroundColor:\n                        automaterialize.paused === false\n                          ? Colors.accentBlue()\n                          : Colors.accentGray(),\n                    }}\n                  />\n                )}\n              </Box>\n            }\n            to=\"/overview/automation\"\n          />\n        ) : null}\n        <TabLink id=\"resources\" title=\"Resources\" to=\"/overview/resources\" />\n        <TabLink id=\"backfills\" title=\"Backfills\" to=\"/overview/backfills\" />\n      </Tabs>\n      {refreshState ? (\n        <Box padding={{bottom: 8}}>\n          <QueryRefreshCountdown refreshState={refreshState} />\n        </Box>\n      ) : null}\n    </Box>\n  );\n};\n","import {Box, Button, Dialog, DialogFooter, DialogHeader, Icon} from '@dagster-io/ui-components';\nimport {useContext, useState} from 'react';\n\nimport {RepoSelector} from '../nav/RepoSelector';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext';\n\nexport const RepoFilterButton = () => {\n  const {allRepos, visibleRepos, toggleVisible} = useContext(WorkspaceContext);\n  const [open, setOpen] = useState(false);\n  return (\n    <>\n      <Dialog\n        canOutsideClickClose\n        canEscapeKeyClose\n        isOpen={open}\n        style={{width: 'auto'}}\n        onClose={() => setOpen(false)}\n      >\n        <DialogHeader icon=\"repo\" label=\"Filter code locations\" />\n        <RepoSelector\n          options={allRepos}\n          onBrowse={() => setOpen(false)}\n          onToggle={toggleVisible}\n          selected={visibleRepos}\n        />\n        <DialogFooter>\n          <Box padding={{top: 8}}>\n            <Button intent=\"none\" onClick={() => setOpen(false)}>\n              Done\n            </Button>\n          </Box>\n        </DialogFooter>\n      </Dialog>\n\n      <Button\n        outlined\n        icon={<Icon name=\"folder\" />}\n        rightIcon={<Icon name=\"expand_more\" />}\n        onClick={() => setOpen(true)}\n      >\n        {`${visibleRepos.length} of ${allRepos.length}`}\n      </Button>\n    </>\n  );\n};\n","import {useCallback, useMemo} from 'react';\n\nimport {useStateWithStorage} from '../hooks/useStateWithStorage';\n\nconst HOUR_WINDOW_KEY = 'dagster.run-timeline-hour-window';\n\nexport type HourWindow = '1' | '6' | '12' | '24';\n\nexport const useHourWindow = (\n  defaultValue: HourWindow,\n): [HourWindow, (value: HourWindow) => void] => {\n  const validate = useCallback(\n    (value: string) => {\n      switch (value) {\n        case '1':\n        case '6':\n        case '12':\n        case '24':\n          return value;\n        default:\n          return defaultValue;\n      }\n    },\n    [defaultValue],\n  );\n\n  const [hourWindow, setHourWindow] = useStateWithStorage(HOUR_WINDOW_KEY, validate);\n  const setHourWindowWithDefault = useCallback(\n    (value: HourWindow) => {\n      setHourWindow(value || defaultValue);\n    },\n    [defaultValue, setHourWindow],\n  );\n\n  return useMemo(\n    () => [hourWindow, setHourWindowWithDefault],\n    [hourWindow, setHourWindowWithDefault],\n  );\n};\n","import {gql} from '@apollo/client';\n\nexport const SCHEDULE_FUTURE_TICKS_FRAGMENT = gql`\n  fragment ScheduleFutureTicksFragment on Schedule {\n    id\n    executionTimezone\n    scheduleState {\n      id\n      status\n    }\n    futureTicks(cursor: $tickCursor, until: $ticksUntil) {\n      results {\n        timestamp\n      }\n    }\n  }\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {useMemo} from 'react';\n\nimport {doneStatuses} from './RunStatuses';\nimport {TimelineJob, TimelineRun} from './RunTimeline';\nimport {RUN_TIME_FRAGMENT} from './RunUtils';\nimport {overlap} from './batchRunsForTimeline';\nimport {RunTimelineQuery, RunTimelineQueryVariables} from './types/useRunsForTimeline.types';\nimport {isHiddenAssetGroupJob} from '../asset-graph/Utils';\nimport {InstigationStatus, RunStatus, RunsFilter} from '../graphql/types';\nimport {SCHEDULE_FUTURE_TICKS_FRAGMENT} from '../instance/NextTick';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePipelinePath} from '../workspace/workspacePath';\n\nexport const useRunsForTimeline = (range: [number, number], runsFilter: RunsFilter = {}) => {\n  const [start, end] = range;\n\n  const startSec = start / 1000.0;\n  const endSec = end / 1000.0;\n\n  const queryData = useQuery<RunTimelineQuery, RunTimelineQueryVariables>(RUN_TIMELINE_QUERY, {\n    notifyOnNetworkStatusChange: true,\n    // With a very large number of runs, operating on the Apollo cache is too expensive and\n    // can block the main thread. This data has to be up-to-the-second fresh anyway, so just\n    // skip the cache entirely.\n    fetchPolicy: 'no-cache',\n    variables: {\n      inProgressFilter: {\n        ...runsFilter,\n        statuses: [RunStatus.CANCELING, RunStatus.STARTED],\n        createdBefore: endSec,\n      },\n      terminatedFilter: {\n        ...runsFilter,\n        statuses: Array.from(doneStatuses),\n        createdBefore: endSec,\n        updatedAfter: startSec,\n      },\n      tickCursor: startSec,\n      ticksUntil: endSec,\n    },\n  });\n\n  const {data, previousData, loading} = queryData;\n\n  const initialLoading = loading && !data;\n  const {unterminated, terminated, workspaceOrError} = data || previousData || {};\n\n  const runsByJobKey = useMemo(() => {\n    const map: {[jobKey: string]: TimelineRun[]} = {};\n    const now = Date.now();\n\n    // fetch all the runs in the given range\n    [\n      ...(unterminated?.__typename === 'Runs' ? unterminated.results : []),\n      ...(terminated?.__typename === 'Runs' ? terminated.results : []),\n    ].forEach((run) => {\n      if (!run.startTime) {\n        return;\n      }\n      if (!run.repositoryOrigin) {\n        return;\n      }\n\n      if (\n        !overlap(\n          {start, end},\n          {\n            start: run.startTime * 1000,\n            end: run.endTime ? run.endTime * 1000 : now,\n          },\n        )\n      ) {\n        return;\n      }\n\n      const runJobKey = makeJobKey(\n        {\n          name: run.repositoryOrigin.repositoryName,\n          location: run.repositoryOrigin.repositoryLocationName,\n        },\n        run.pipelineName,\n      );\n\n      map[runJobKey] = [\n        ...(map[runJobKey] || []),\n        {\n          id: run.id,\n          status: run.status,\n          startTime: run.startTime * 1000,\n          endTime: run.endTime ? run.endTime * 1000 : now,\n        },\n      ];\n    });\n\n    return map;\n  }, [end, unterminated, terminated, start]);\n\n  const jobsWithRuns: TimelineJob[] = useMemo(() => {\n    if (!workspaceOrError || workspaceOrError.__typename !== 'Workspace') {\n      return [];\n    }\n\n    const jobs: TimelineJob[] = [];\n    for (const locationEntry of workspaceOrError.locationEntries) {\n      if (\n        locationEntry.__typename !== 'WorkspaceLocationEntry' ||\n        locationEntry.locationOrLoadError?.__typename !== 'RepositoryLocation'\n      ) {\n        continue;\n      }\n\n      const now = Date.now();\n      for (const repository of locationEntry.locationOrLoadError.repositories) {\n        const repoAddress = buildRepoAddress(\n          repository.name,\n          locationEntry.locationOrLoadError.name,\n        );\n\n        for (const pipeline of repository.pipelines) {\n          const schedules = (repository.schedules || []).filter(\n            (schedule) => schedule.pipelineName === pipeline.name,\n          );\n\n          const jobTicks: TimelineRun[] = [];\n          for (const schedule of schedules) {\n            if (schedule.scheduleState.status === InstigationStatus.RUNNING) {\n              schedule.futureTicks.results.forEach(({timestamp}) => {\n                const startTime = timestamp! * 1000;\n                if (startTime > now && overlap({start, end}, {start: startTime, end: startTime})) {\n                  jobTicks.push({\n                    id: `${schedule.pipelineName}-future-run-${timestamp}`,\n                    status: 'SCHEDULED',\n                    startTime,\n                    endTime: startTime + 5 * 1000,\n                  });\n                }\n              });\n            }\n          }\n\n          const isAdHoc = isHiddenAssetGroupJob(pipeline.name);\n          const jobKey = makeJobKey(repoAddress, pipeline.name);\n          const jobName = isAdHoc ? 'Ad hoc materializations' : pipeline.name;\n\n          const jobRuns = runsByJobKey[jobKey] || [];\n          if (!jobTicks.length && !jobRuns.length) {\n            continue;\n          }\n\n          const jobsAndTicksToAdd = [...jobRuns, ...jobTicks];\n          if (isAdHoc) {\n            const adHocJobs = jobs.find(\n              (job) => job.jobType === 'asset' && job.repoAddress === repoAddress,\n            );\n            if (adHocJobs) {\n              adHocJobs.runs.push(...jobsAndTicksToAdd);\n              continue;\n            }\n          }\n\n          jobs.push({\n            key: jobKey,\n            jobName,\n            jobType: isAdHoc ? 'asset' : 'job',\n            repoAddress,\n            path: workspacePipelinePath({\n              repoName: repoAddress.name,\n              repoLocation: repoAddress.location,\n              pipelineName: pipeline.name,\n              isJob: pipeline.isJob,\n            }),\n            runs: [...jobRuns, ...jobTicks],\n          } as TimelineJob);\n        }\n      }\n    }\n\n    const earliest = jobs.reduce(\n      (accum, job) => {\n        const startTimes = job.runs.map((job) => job.startTime);\n        return {...accum, [job.key]: Math.min(...startTimes)};\n      },\n      {} as {[jobKey: string]: number},\n    );\n\n    return jobs.sort((a, b) => earliest[a.key]! - earliest[b.key]!);\n  }, [workspaceOrError, runsByJobKey, start, end]);\n\n  return useMemo(\n    () => ({\n      jobs: jobsWithRuns,\n      initialLoading,\n      queryData,\n    }),\n    [initialLoading, jobsWithRuns, queryData],\n  );\n};\n\nexport const makeJobKey = (repoAddress: RepoAddress, jobName: string) =>\n  `${jobName}-${repoAddressAsHumanString(repoAddress)}`;\n\nconst RUN_TIMELINE_QUERY = gql`\n  query RunTimelineQuery(\n    $inProgressFilter: RunsFilter!\n    $terminatedFilter: RunsFilter!\n    $tickCursor: Float\n    $ticksUntil: Float\n  ) {\n    unterminated: runsOrError(filter: $inProgressFilter) {\n      ... on Runs {\n        results {\n          id\n          pipelineName\n          repositoryOrigin {\n            id\n            repositoryName\n            repositoryLocationName\n          }\n          ...RunTimeFragment\n        }\n      }\n    }\n    terminated: runsOrError(filter: $terminatedFilter) {\n      ... on Runs {\n        results {\n          id\n          pipelineName\n          repositoryOrigin {\n            id\n            repositoryName\n            repositoryLocationName\n          }\n          ...RunTimeFragment\n        }\n      }\n    }\n    workspaceOrError {\n      ... on Workspace {\n        id\n        locationEntries {\n          id\n          name\n          loadStatus\n          displayMetadata {\n            key\n            value\n          }\n          locationOrLoadError {\n            ... on RepositoryLocation {\n              id\n              name\n              repositories {\n                id\n                name\n                pipelines {\n                  id\n                  name\n                  isJob\n                }\n                schedules {\n                  id\n                  name\n                  pipelineName\n                  scheduleState {\n                    id\n                    status\n                  }\n                  ...ScheduleFutureTicksFragment\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  ${RUN_TIME_FRAGMENT}\n  ${SCHEDULE_FUTURE_TICKS_FRAGMENT}\n`;\n","import {Box, Button, ButtonGroup, ErrorBoundary, TextInput} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {RepoFilterButton} from '../instance/RepoFilterButton';\nimport {usePageLoadTrace} from '../performance';\nimport {RunTimeline} from '../runs/RunTimeline';\nimport {HourWindow, useHourWindow} from '../runs/useHourWindow';\nimport {makeJobKey, useRunsForTimeline} from '../runs/useRunsForTimeline';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nconst LOOKAHEAD_HOURS = 1;\nconst ONE_HOUR = 60 * 60 * 1000;\nconst POLL_INTERVAL = 60 * 1000;\n\nconst hourWindowToOffset = (hourWindow: HourWindow) => {\n  switch (hourWindow) {\n    case '1':\n      return ONE_HOUR;\n    case '6':\n      return 6 * ONE_HOUR;\n    case '12':\n      return 12 * ONE_HOUR;\n    case '24':\n      return 24 * ONE_HOUR;\n  }\n};\n\ntype Props = {\n  Header: React.ComponentType<{refreshState: ReturnType<typeof useQueryRefreshAtInterval>}>;\n  TabButton: React.ComponentType<{selected: 'timeline' | 'assets'}>;\n};\n\nexport const OverviewTimelineRoot = ({Header, TabButton}: Props) => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Timeline');\n  const trace = usePageLoadTrace('OverviewTimelineRoot');\n\n  const {allRepos, visibleRepos} = React.useContext(WorkspaceContext);\n\n  const [hourWindow, setHourWindow] = useHourWindow('12');\n  const [now, setNow] = React.useState(() => Date.now());\n  const [offsetMsec, setOffsetMsec] = React.useState(() => 0);\n  const [searchValue, setSearchValue] = useQueryPersistedState<string>({\n    queryKey: 'search',\n    defaults: {search: ''},\n  });\n\n  React.useEffect(() => {\n    setNow(Date.now());\n    const timer = setInterval(() => {\n      setNow(Date.now());\n    }, POLL_INTERVAL);\n\n    return () => {\n      clearInterval(timer);\n    };\n  }, [hourWindow]);\n\n  const onPageEarlier = React.useCallback(() => {\n    setOffsetMsec((current) => current - hourWindowToOffset(hourWindow));\n  }, [hourWindow]);\n\n  const onPageLater = React.useCallback(() => {\n    setOffsetMsec((current) => current + hourWindowToOffset(hourWindow));\n  }, [hourWindow]);\n\n  const onPageNow = React.useCallback(() => {\n    setOffsetMsec(0);\n  }, []);\n\n  const range: [number, number] = React.useMemo(\n    () => [\n      now - Number(hourWindow) * ONE_HOUR + offsetMsec,\n      now + LOOKAHEAD_HOURS * ONE_HOUR + offsetMsec,\n    ],\n    [hourWindow, now, offsetMsec],\n  );\n\n  const {jobs, initialLoading, queryData} = useRunsForTimeline(range);\n  const refreshState = useQueryRefreshAtInterval(queryData, FIFTEEN_SECONDS);\n\n  React.useEffect(() => {\n    if (!initialLoading) {\n      trace.endTrace();\n    }\n  }, [initialLoading, trace]);\n\n  const visibleJobKeys = React.useMemo(() => {\n    const searchLower = searchValue.toLocaleLowerCase().trim();\n    const flat = visibleRepos.flatMap((repo) => {\n      const repoAddress = buildRepoAddress(repo.repository.name, repo.repositoryLocation.name);\n      return repo.repository.pipelines\n        .filter(({name}) => name.toLocaleLowerCase().includes(searchLower))\n        .map((job) => makeJobKey(repoAddress, job.name));\n    });\n    return new Set(flat);\n  }, [visibleRepos, searchValue]);\n\n  const visibleJobs = React.useMemo(\n    () => jobs.filter(({key}) => visibleJobKeys.has(key)),\n    [jobs, visibleJobKeys],\n  );\n\n  return (\n    <>\n      <Header refreshState={refreshState} />\n      <Box\n        padding={{horizontal: 24, vertical: 16}}\n        flex={{alignItems: 'center', justifyContent: 'space-between'}}\n      >\n        <Box flex={{direction: 'row', alignItems: 'center', gap: 12, grow: 0}}>\n          <TabButton selected=\"timeline\" />\n          {allRepos.length > 1 && <RepoFilterButton />}\n          <TextInput\n            icon=\"search\"\n            value={searchValue}\n            onChange={(e) => setSearchValue(e.target.value)}\n            placeholder=\"Filter by job name…\"\n            style={{width: '200px'}}\n          />\n        </Box>\n        <Box flex={{direction: 'row', gap: 16, alignItems: 'center'}}>\n          <ButtonGroup<HourWindow>\n            activeItems={new Set([hourWindow])}\n            buttons={[\n              {id: '1', label: '1hr'},\n              {id: '6', label: '6hr'},\n              {id: '12', label: '12hr'},\n              {id: '24', label: '24hr'},\n            ]}\n            onClick={(hrWindow: HourWindow) => setHourWindow(hrWindow)}\n          />\n          <Box flex={{direction: 'row', gap: 4, alignItems: 'center'}}>\n            <Button onClick={onPageEarlier}>&larr;</Button>\n            <Button onClick={onPageNow}>Now</Button>\n            <Button onClick={onPageLater}>&rarr;</Button>\n          </Box>\n        </Box>\n      </Box>\n      <ErrorBoundary region=\"timeline\">\n        <RunTimeline loading={initialLoading} range={range} jobs={visibleJobs} />\n      </ErrorBoundary>\n    </>\n  );\n};\n","import {Box, Heading, JoinedButtons, PageHeader} from '@dagster-io/ui-components';\nimport * as React from 'react';\nimport {Redirect, Route, Switch} from 'react-router-dom';\n\nimport {OverviewAssetsRoot} from './OverviewAssetsRoot';\nimport {OverviewTabs} from './OverviewTabs';\nimport {OverviewTimelineRoot} from './OverviewTimelineRoot';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useStateWithStorage} from '../hooks/useStateWithStorage';\nimport {ActivatableButton} from '../runs/RunListTabs';\n\nexport const OverviewActivityRoot = () => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Activity');\n\n  const header = React.useCallback(\n    ({refreshState}: {refreshState: React.ComponentProps<typeof OverviewTabs>['refreshState']}) => (\n      <PageHeader\n        title={<Heading>Overview</Heading>}\n        tabs={<OverviewTabs tab=\"activity\" refreshState={refreshState} />}\n      />\n    ),\n    [],\n  );\n\n  const [defaultTab, setDefaultTab] = useStateWithStorage<'timeline' | 'assets'>(\n    'overview-activity-tab',\n    (json) => (['timeline', 'assets'].includes(json) ? json : 'timeline'),\n  );\n\n  const tabButton = React.useCallback(\n    ({selected}: {selected: 'timeline' | 'assets'}) => {\n      if (defaultTab !== selected) {\n        setDefaultTab(selected);\n      }\n      return (\n        <JoinedButtons>\n          <ActivatableButton $active={selected === 'timeline'} to=\"/overview/activity/timeline\">\n            Timeline\n          </ActivatableButton>\n          <ActivatableButton $active={selected === 'assets'} to=\"/overview/activity/assets\">\n            Assets\n          </ActivatableButton>\n        </JoinedButtons>\n      );\n    },\n    [defaultTab, setDefaultTab],\n  );\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <Switch>\n        <Route path=\"/overview/activity/assets\">\n          <OverviewAssetsRoot Header={header} TabButton={tabButton} />\n        </Route>\n        <Route path=\"/overview/activity/timeline\">\n          <OverviewTimelineRoot Header={header} TabButton={tabButton} />\n        </Route>\n        <Route\n          path=\"*\"\n          render={React.useCallback(\n            () =>\n              defaultTab === 'timeline' ? (\n                <Redirect to=\"/overview/activity/timeline\" />\n              ) : (\n                <Redirect to=\"/overview/activity/assets\" />\n              ),\n            [defaultTab],\n          )}\n        />\n      </Switch>\n    </Box>\n  );\n};\n","import {Tag, Tooltip} from '@dagster-io/ui-components';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport {useMemo, useRef} from 'react';\n\nimport {OVERVIEW_COLLAPSED_KEY} from './OverviewExpansionKey';\nimport {Container, Inner} from '../ui/VirtualizedTable';\nimport {findDuplicateRepoNames} from '../ui/findDuplicateRepoNames';\nimport {useRepoExpansionState} from '../ui/useRepoExpansionState';\nimport {VirtualizedJobHeader, VirtualizedJobRow} from '../workspace/VirtualizedJobRow';\nimport {RepoRow} from '../workspace/VirtualizedWorkspaceTable';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\ntype Repository = {\n  repoAddress: RepoAddress;\n  jobs: {\n    isJob: boolean;\n    name: string;\n  }[];\n};\n\ninterface Props {\n  repos: Repository[];\n}\n\ntype RowType =\n  | {type: 'header'; repoAddress: RepoAddress; jobCount: number}\n  | {type: 'job'; repoAddress: RepoAddress; isJob: boolean; name: string};\n\nexport const OverviewJobsTable = ({repos}: Props) => {\n  const parentRef = useRef<HTMLDivElement | null>(null);\n  const allKeys = useMemo(\n    () => repos.map(({repoAddress}) => repoAddressAsHumanString(repoAddress)),\n    [repos],\n  );\n\n  const {expandedKeys, onToggle, onToggleAll} = useRepoExpansionState(\n    OVERVIEW_COLLAPSED_KEY,\n    allKeys,\n  );\n\n  const flattened: RowType[] = useMemo(() => {\n    const flat: RowType[] = [];\n    repos.forEach(({repoAddress, jobs}) => {\n      flat.push({type: 'header', repoAddress, jobCount: jobs.length});\n      const repoKey = repoAddressAsHumanString(repoAddress);\n      if (expandedKeys.includes(repoKey)) {\n        jobs.forEach(({isJob, name}) => {\n          flat.push({type: 'job', repoAddress, isJob, name});\n        });\n      }\n    });\n    return flat;\n  }, [repos, expandedKeys]);\n\n  const duplicateRepoNames = findDuplicateRepoNames(repos.map(({repoAddress}) => repoAddress.name));\n\n  const rowVirtualizer = useVirtualizer({\n    count: flattened.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: (ii: number) => {\n      const row = flattened[ii];\n      return row?.type === 'header' ? 32 : 64;\n    },\n    overscan: 10,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  return (\n    <>\n      <VirtualizedJobHeader />\n      <div style={{overflow: 'hidden'}}>\n        <Container ref={parentRef}>\n          <Inner $totalHeight={totalHeight}>\n            {items.map(({index, key, size, start}) => {\n              const row: RowType = flattened[index]!;\n              const type = row!.type;\n              return type === 'header' ? (\n                <RepoRow\n                  repoAddress={row.repoAddress}\n                  key={key}\n                  height={size}\n                  start={start}\n                  onToggle={onToggle}\n                  onToggleAll={onToggleAll}\n                  expanded={expandedKeys.includes(repoAddressAsHumanString(row.repoAddress))}\n                  showLocation={duplicateRepoNames.has(row.repoAddress.name)}\n                  rightElement={\n                    <Tooltip\n                      content={row.jobCount === 1 ? '1 job' : `${row.jobCount} jobs`}\n                      placement=\"top\"\n                    >\n                      <Tag>{row.jobCount}</Tag>\n                    </Tooltip>\n                  }\n                />\n              ) : (\n                <VirtualizedJobRow\n                  key={key}\n                  name={row.name}\n                  isJob={row.isJob}\n                  repoAddress={row.repoAddress}\n                  height={size}\n                  start={start}\n                />\n              );\n            })}\n          </Inner>\n        </Container>\n      </div>\n    </>\n  );\n};\n","import {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\ninterface Bucket {\n  repoAddress: RepoAddress;\n}\n\nexport const sortRepoBuckets = <B extends Bucket>(buckets: B[]) => {\n  return [...buckets].sort((a, b) => {\n    const aString = repoAddressAsHumanString(a.repoAddress);\n    const bString = repoAddressAsHumanString(b.repoAddress);\n    return aString.localeCompare(bString);\n  });\n};\n","import {DagsterRepoOption} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\n\nexport const visibleRepoKeys = (visibleRepos: DagsterRepoOption[]) => {\n  return new Set(\n    visibleRepos.map((option) =>\n      repoAddressAsHumanString(\n        buildRepoAddress(option.repository.name, option.repositoryLocation.name),\n      ),\n    ),\n  );\n};\n","import {useEffect, useState} from 'react';\n\nexport const useDelayedState = (delayMsec: number) => {\n  const [value, setValue] = useState(false);\n\n  useEffect(() => {\n    const timer = setTimeout(() => setValue(true), delayMsec);\n    return () => clearTimeout(timer);\n  }, [delayMsec]);\n\n  return value;\n};\n","import {Box, Spinner, Tooltip, useDelayedState} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\ninterface Props {\n  tooltipContent: string | React.ReactElement | null;\n}\n\nconst SPINNER_WAIT_MSEC = 2000;\n\nexport const SearchInputSpinner = (props: Props) => {\n  const {tooltipContent} = props;\n  const canShowSpinner = useDelayedState(SPINNER_WAIT_MSEC);\n\n  if (!canShowSpinner) {\n    return null;\n  }\n\n  return (\n    <Box margin={{top: 1}}>\n      <Tooltip placement=\"top\" canShow={!!tooltipContent} content={tooltipContent || ''}>\n        <Spinner purpose=\"body-text\" />\n      </Tooltip>\n    </Box>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {\n  Box,\n  Colors,\n  Heading,\n  NonIdealState,\n  PageHeader,\n  Spinner,\n  TextInput,\n} from '@dagster-io/ui-components';\nimport {useContext, useMemo} from 'react';\n\nimport {OverviewJobsTable} from './OverviewJobsTable';\nimport {OverviewTabs} from './OverviewTabs';\nimport {sortRepoBuckets} from './sortRepoBuckets';\nimport {OverviewJobsQuery, OverviewJobsQueryVariables} from './types/OverviewJobsRoot.types';\nimport {visibleRepoKeys} from './visibleRepoKeys';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {isHiddenAssetGroupJob} from '../asset-graph/Utils';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {RepoFilterButton} from '../instance/RepoFilterButton';\nimport {SearchInputSpinner} from '../ui/SearchInputSpinner';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nexport const OverviewJobsRoot = () => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Jobs');\n\n  const {allRepos, visibleRepos, loading: workspaceLoading} = useContext(WorkspaceContext);\n  const [searchValue, setSearchValue] = useQueryPersistedState<string>({\n    queryKey: 'search',\n    defaults: {search: ''},\n  });\n\n  const repoCount = allRepos.length;\n\n  const queryResultOverview = useQuery<OverviewJobsQuery, OverviewJobsQueryVariables>(\n    OVERVIEW_JOBS_QUERY,\n    {\n      fetchPolicy: 'network-only',\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n  const {data, loading} = queryResultOverview;\n\n  const refreshState = useQueryRefreshAtInterval(queryResultOverview, FIFTEEN_SECONDS);\n\n  // Batch up the data and bucket by repo.\n  const repoBuckets = useMemo(() => {\n    const visibleKeys = visibleRepoKeys(visibleRepos);\n    return buildBuckets(data).filter(({repoAddress}) =>\n      visibleKeys.has(repoAddressAsHumanString(repoAddress)),\n    );\n  }, [data, visibleRepos]);\n\n  const sanitizedSearch = searchValue.trim().toLocaleLowerCase();\n  const anySearch = sanitizedSearch.length > 0;\n\n  const filteredBySearch = useMemo(() => {\n    const searchToLower = sanitizedSearch.toLocaleLowerCase();\n    return repoBuckets\n      .map(({repoAddress, jobs}) => ({\n        repoAddress,\n        jobs: jobs.filter(({name}) => name.toLocaleLowerCase().includes(searchToLower)),\n      }))\n      .filter(({jobs}) => jobs.length > 0);\n  }, [repoBuckets, sanitizedSearch]);\n\n  const content = () => {\n    if (loading && !data) {\n      return (\n        <Box flex={{direction: 'row', justifyContent: 'center'}} style={{paddingTop: '100px'}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 16}}>\n            <Spinner purpose=\"body-text\" />\n            <div style={{color: Colors.textLight()}}>Loading jobs…</div>\n          </Box>\n        </Box>\n      );\n    }\n\n    const anyReposHidden = allRepos.length > visibleRepos.length;\n\n    if (!filteredBySearch.length) {\n      if (anySearch) {\n        return (\n          <Box padding={{top: 20}}>\n            <NonIdealState\n              icon=\"search\"\n              title=\"No matching jobs\"\n              description={\n                anyReposHidden ? (\n                  <div>\n                    No jobs matching <strong>{searchValue}</strong> were found in the selected code\n                    locations\n                  </div>\n                ) : (\n                  <div>\n                    No jobs matching <strong>{searchValue}</strong> were found in your definitions\n                  </div>\n                )\n              }\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{top: 20}}>\n          <NonIdealState\n            icon=\"search\"\n            title=\"No jobs\"\n            description={\n              anyReposHidden\n                ? 'No jobs were found in the selected code locations'\n                : 'No jobs were found in your definitions'\n            }\n          />\n        </Box>\n      );\n    }\n\n    return <OverviewJobsTable repos={filteredBySearch} />;\n  };\n\n  const showSearchSpinner = (workspaceLoading && !repoCount) || (loading && !data);\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <PageHeader\n        title={<Heading>Overview</Heading>}\n        tabs={<OverviewTabs tab=\"jobs\" refreshState={refreshState} />}\n      />\n      <Box\n        padding={{horizontal: 24, vertical: 16}}\n        flex={{direction: 'row', alignItems: 'center', gap: 12, grow: 0}}\n      >\n        {repoCount > 1 ? <RepoFilterButton /> : null}\n        <TextInput\n          icon=\"search\"\n          value={searchValue}\n          rightElement={\n            showSearchSpinner ? <SearchInputSpinner tooltipContent=\"Loading jobs…\" /> : undefined\n          }\n          onChange={(e) => setSearchValue(e.target.value)}\n          placeholder=\"Filter by job name…\"\n          style={{width: '340px'}}\n        />\n      </Box>\n      {loading && !repoCount ? (\n        <Box padding={64}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      ) : (\n        content()\n      )}\n    </Box>\n  );\n};\n\ntype RepoBucket = {\n  repoAddress: RepoAddress;\n  jobs: {\n    isJob: boolean;\n    name: string;\n  }[];\n};\n\nconst buildBuckets = (data?: OverviewJobsQuery): RepoBucket[] => {\n  if (data?.workspaceOrError.__typename !== 'Workspace') {\n    return [];\n  }\n\n  const entries = data.workspaceOrError.locationEntries.map((entry) => entry.locationOrLoadError);\n  const buckets = [];\n\n  for (const entry of entries) {\n    if (entry?.__typename !== 'RepositoryLocation') {\n      continue;\n    }\n\n    for (const repo of entry.repositories) {\n      const {name, pipelines} = repo;\n      const repoAddress = buildRepoAddress(name, entry.name);\n      const jobs = pipelines\n        .filter(({name}) => !isHiddenAssetGroupJob(name))\n        .map((pipeline) => {\n          return {\n            isJob: pipeline.isJob,\n            name: pipeline.name,\n          };\n        });\n\n      if (jobs.length > 0) {\n        buckets.push({\n          repoAddress,\n          jobs,\n        });\n      }\n    }\n  }\n\n  return sortRepoBuckets(buckets);\n};\n\nconst OVERVIEW_JOBS_QUERY = gql`\n  query OverviewJobsQuery {\n    workspaceOrError {\n      ... on Workspace {\n        id\n        locationEntries {\n          id\n          locationOrLoadError {\n            ... on RepositoryLocation {\n              id\n              name\n              repositories {\n                id\n                name\n                pipelines {\n                  id\n                  name\n                  isJob\n                }\n              }\n            }\n            ...PythonErrorFragment\n          }\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {Tag, Tooltip} from '@dagster-io/ui-components';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport {useMemo, useRef} from 'react';\n\nimport {OVERVIEW_COLLAPSED_KEY} from './OverviewExpansionKey';\nimport {\n  VirtualizedResourceHeader,\n  VirtualizedResourceRow,\n} from '../resources/VirtualizedResourceRow';\nimport {ResourceEntryFragment} from '../resources/types/WorkspaceResourcesRoot.types';\nimport {Container, Inner} from '../ui/VirtualizedTable';\nimport {findDuplicateRepoNames} from '../ui/findDuplicateRepoNames';\nimport {useRepoExpansionState} from '../ui/useRepoExpansionState';\nimport {RepoRow} from '../workspace/VirtualizedWorkspaceTable';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\ntype Repository = {\n  repoAddress: RepoAddress;\n  resources: ResourceEntryFragment[];\n};\n\ninterface Props {\n  repos: Repository[];\n}\n\ninterface Resource extends ResourceEntryFragment {\n  type: 'resource';\n  repoAddress: RepoAddress;\n}\n\ntype RowType = {type: 'header'; repoAddress: RepoAddress; resourceCount: number} | Resource;\n\nexport const OverviewResourcesTable = ({repos}: Props) => {\n  const parentRef = useRef<HTMLDivElement | null>(null);\n  const allKeys = useMemo(\n    () => repos.map(({repoAddress}) => repoAddressAsHumanString(repoAddress)),\n    [repos],\n  );\n\n  const {expandedKeys, onToggle, onToggleAll} = useRepoExpansionState(\n    OVERVIEW_COLLAPSED_KEY,\n    allKeys,\n  );\n\n  const flattened: RowType[] = useMemo(() => {\n    const flat: RowType[] = [];\n    repos.forEach(({repoAddress, resources}) => {\n      flat.push({type: 'header', repoAddress, resourceCount: resources.length});\n      const repoKey = repoAddressAsHumanString(repoAddress);\n      if (expandedKeys.includes(repoKey)) {\n        resources.forEach((resource) => {\n          flat.push({type: 'resource', repoAddress, ...resource});\n        });\n      }\n    });\n    return flat;\n  }, [repos, expandedKeys]);\n\n  const duplicateRepoNames = findDuplicateRepoNames(repos.map(({repoAddress}) => repoAddress.name));\n\n  const rowVirtualizer = useVirtualizer({\n    count: flattened.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: (ii: number) => {\n      const row = flattened[ii];\n      return row?.type === 'header' ? 32 : 64;\n    },\n    overscan: 10,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  return (\n    <>\n      <VirtualizedResourceHeader />\n      <div style={{overflow: 'hidden'}}>\n        <Container ref={parentRef}>\n          <Inner $totalHeight={totalHeight}>\n            {items.map(({index, key, size, start}) => {\n              const row: RowType = flattened[index]!;\n              const type = row!.type;\n              return type === 'header' ? (\n                <RepoRow\n                  repoAddress={row.repoAddress}\n                  key={key}\n                  height={size}\n                  start={start}\n                  onToggle={onToggle}\n                  onToggleAll={onToggleAll}\n                  expanded={expandedKeys.includes(repoAddressAsHumanString(row.repoAddress))}\n                  showLocation={duplicateRepoNames.has(row.repoAddress.name)}\n                  rightElement={\n                    <Tooltip\n                      content={\n                        row.resourceCount === 1 ? '1 resource' : `${row.resourceCount} resources`\n                      }\n                      placement=\"top\"\n                    >\n                      <Tag>{row.resourceCount}</Tag>\n                    </Tooltip>\n                  }\n                />\n              ) : (\n                <VirtualizedResourceRow key={key} height={size} start={start} {...row} />\n              );\n            })}\n          </Inner>\n        </Container>\n      </div>\n    </>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {\n  Box,\n  Colors,\n  Heading,\n  NonIdealState,\n  PageHeader,\n  Spinner,\n  TextInput,\n} from '@dagster-io/ui-components';\nimport {useContext, useMemo} from 'react';\n\nimport {OverviewResourcesTable} from './OverviewResourcesTable';\nimport {OverviewTabs} from './OverviewTabs';\nimport {sortRepoBuckets} from './sortRepoBuckets';\nimport {\n  OverviewResourcesQuery,\n  OverviewResourcesQueryVariables,\n} from './types/OverviewResourcesRoot.types';\nimport {visibleRepoKeys} from './visibleRepoKeys';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {RepoFilterButton} from '../instance/RepoFilterButton';\nimport {RESOURCE_ENTRY_FRAGMENT} from '../resources/WorkspaceResourcesRoot';\nimport {ResourceEntryFragment} from '../resources/types/WorkspaceResourcesRoot.types';\nimport {SearchInputSpinner} from '../ui/SearchInputSpinner';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nexport const OverviewResourcesRoot = () => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Resources');\n\n  const {allRepos, visibleRepos, loading: workspaceLoading} = useContext(WorkspaceContext);\n  const [searchValue, setSearchValue] = useQueryPersistedState<string>({\n    queryKey: 'search',\n    defaults: {search: ''},\n  });\n\n  const repoCount = allRepos.length;\n\n  const queryResultOverview = useQuery<OverviewResourcesQuery, OverviewResourcesQueryVariables>(\n    OVERVIEW_RESOURCES_QUERY,\n    {\n      fetchPolicy: 'network-only',\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n  const {data, loading} = queryResultOverview;\n\n  const refreshState = useQueryRefreshAtInterval(queryResultOverview, FIFTEEN_SECONDS);\n\n  // Batch up the data and bucket by repo.\n  const repoBuckets = useMemo(() => {\n    const visibleKeys = visibleRepoKeys(visibleRepos);\n    return buildBuckets(data).filter(({repoAddress}) =>\n      visibleKeys.has(repoAddressAsHumanString(repoAddress)),\n    );\n  }, [data, visibleRepos]);\n\n  const sanitizedSearch = searchValue.trim().toLocaleLowerCase();\n  const anySearch = sanitizedSearch.length > 0;\n\n  const filteredBySearch = useMemo(() => {\n    const searchToLower = sanitizedSearch.toLocaleLowerCase();\n    return repoBuckets\n      .map(({repoAddress, resources}) => ({\n        repoAddress,\n        resources: resources.filter(({name}) => name.toLocaleLowerCase().includes(searchToLower)),\n      }))\n      .filter(({resources}) => resources.length > 0);\n  }, [repoBuckets, sanitizedSearch]);\n\n  const content = () => {\n    if (loading && !data) {\n      return (\n        <Box flex={{direction: 'row', justifyContent: 'center'}} style={{paddingTop: '100px'}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 16}}>\n            <Spinner purpose=\"body-text\" />\n            <div style={{color: Colors.textLight()}}>Loading resources…</div>\n          </Box>\n        </Box>\n      );\n    }\n\n    const anyReposHidden = allRepos.length > visibleRepos.length;\n\n    if (!filteredBySearch.length) {\n      if (anySearch) {\n        return (\n          <Box padding={{top: 20}}>\n            <NonIdealState\n              icon=\"search\"\n              title=\"No matching resources\"\n              description={\n                anyReposHidden ? (\n                  <div>\n                    No resources matching <strong>{searchValue}</strong> were found in the selected\n                    code locations\n                  </div>\n                ) : (\n                  <div>\n                    No resources matching <strong>{searchValue}</strong> were found in your\n                    definitions\n                  </div>\n                )\n              }\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{top: 20}}>\n          <NonIdealState\n            icon=\"search\"\n            title=\"No resources\"\n            description={\n              anyReposHidden\n                ? 'No resources were found in the selected code locations'\n                : 'No resources were found in your definitions'\n            }\n          />\n        </Box>\n      );\n    }\n\n    return <OverviewResourcesTable repos={filteredBySearch} />;\n  };\n\n  const showSearchSpinner = (workspaceLoading && !repoCount) || (loading && !data);\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <PageHeader\n        title={<Heading>Overview</Heading>}\n        tabs={<OverviewTabs tab=\"resources\" refreshState={refreshState} />}\n      />\n      <Box\n        padding={{horizontal: 24, vertical: 16}}\n        flex={{direction: 'row', alignItems: 'center', gap: 12, grow: 0}}\n      >\n        {repoCount > 1 ? <RepoFilterButton /> : null}\n        <TextInput\n          icon=\"search\"\n          value={searchValue}\n          rightElement={\n            showSearchSpinner ? (\n              <SearchInputSpinner tooltipContent=\"Loading resources…\" />\n            ) : undefined\n          }\n          onChange={(e) => setSearchValue(e.target.value)}\n          placeholder=\"Filter by resource name…\"\n          style={{width: '340px'}}\n        />\n      </Box>\n      {loading && !repoCount ? (\n        <Box padding={64}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      ) : (\n        content()\n      )}\n    </Box>\n  );\n};\n\ntype RepoBucket = {\n  repoAddress: RepoAddress;\n  resources: ResourceEntryFragment[];\n};\n\nconst buildBuckets = (data?: OverviewResourcesQuery): RepoBucket[] => {\n  if (data?.workspaceOrError.__typename !== 'Workspace') {\n    return [];\n  }\n\n  const entries = data.workspaceOrError.locationEntries.map((entry) => entry.locationOrLoadError);\n  const buckets = [];\n\n  for (const entry of entries) {\n    if (entry?.__typename !== 'RepositoryLocation') {\n      continue;\n    }\n\n    for (const repo of entry.repositories) {\n      const {name, allTopLevelResourceDetails} = repo;\n      const repoAddress = buildRepoAddress(name, entry.name);\n\n      if (allTopLevelResourceDetails.length > 0) {\n        buckets.push({\n          repoAddress,\n          resources: allTopLevelResourceDetails,\n        });\n      }\n    }\n  }\n\n  return sortRepoBuckets(buckets);\n};\n\nconst OVERVIEW_RESOURCES_QUERY = gql`\n  query OverviewResourcesQuery {\n    workspaceOrError {\n      ... on Workspace {\n        id\n        locationEntries {\n          id\n          locationOrLoadError {\n            ... on RepositoryLocation {\n              id\n              name\n              repositories {\n                id\n                name\n                allTopLevelResourceDetails {\n                  id\n                  ...ResourceEntryFragment\n                }\n              }\n            }\n            ...PythonErrorFragment\n          }\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n  ${RESOURCE_ENTRY_FRAGMENT}\n`;\n","import {Tag, Tooltip} from '@dagster-io/ui-components';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport * as React from 'react';\n\nimport {OVERVIEW_COLLAPSED_KEY} from './OverviewExpansionKey';\nimport {BasicInstigationStateFragment} from './types/BasicInstigationStateFragment.types';\nimport {makeScheduleKey} from '../schedules/makeScheduleKey';\nimport {Container, Inner} from '../ui/VirtualizedTable';\nimport {findDuplicateRepoNames} from '../ui/findDuplicateRepoNames';\nimport {useRepoExpansionState} from '../ui/useRepoExpansionState';\nimport {\n  VirtualizedScheduleHeader,\n  VirtualizedScheduleRow,\n} from '../workspace/VirtualizedScheduleRow';\nimport {RepoRow} from '../workspace/VirtualizedWorkspaceTable';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\ntype ScheduleInfo = {name: string; scheduleState: BasicInstigationStateFragment};\n\ntype Repository = {\n  repoAddress: RepoAddress;\n  schedules: ScheduleInfo[];\n};\n\ninterface Props {\n  repos: Repository[];\n  headerCheckbox: React.ReactNode;\n  checkedKeys: Set<string>;\n  onToggleCheckFactory: (path: string) => (values: {checked: boolean; shiftKey: boolean}) => void;\n}\n\ntype RowType =\n  | {type: 'header'; repoAddress: RepoAddress; scheduleCount: number}\n  | {type: 'schedule'; repoAddress: RepoAddress; schedule: ScheduleInfo};\n\nexport const OverviewScheduleTable = ({\n  repos,\n  headerCheckbox,\n  checkedKeys,\n  onToggleCheckFactory,\n}: Props) => {\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n  const allKeys = React.useMemo(\n    () => repos.map(({repoAddress}) => repoAddressAsHumanString(repoAddress)),\n    [repos],\n  );\n\n  const {expandedKeys, onToggle, onToggleAll} = useRepoExpansionState(\n    OVERVIEW_COLLAPSED_KEY,\n    allKeys,\n  );\n\n  const flattened: RowType[] = React.useMemo(() => {\n    const flat: RowType[] = [];\n    repos.forEach(({repoAddress, schedules}) => {\n      flat.push({type: 'header', repoAddress, scheduleCount: schedules.length});\n      const repoKey = repoAddressAsHumanString(repoAddress);\n      if (expandedKeys.includes(repoKey)) {\n        schedules.forEach((schedule) => {\n          flat.push({type: 'schedule', repoAddress, schedule});\n        });\n      }\n    });\n    return flat;\n  }, [repos, expandedKeys]);\n\n  const duplicateRepoNames = findDuplicateRepoNames(repos.map(({repoAddress}) => repoAddress.name));\n\n  const rowVirtualizer = useVirtualizer({\n    count: flattened.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: (ii: number) => {\n      const row = flattened[ii];\n      return row?.type === 'header' ? 32 : 64;\n    },\n    overscan: 10,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  return (\n    <>\n      <VirtualizedScheduleHeader checkbox={headerCheckbox} />\n      <div style={{overflow: 'hidden'}}>\n        <Container ref={parentRef}>\n          <Inner $totalHeight={totalHeight}>\n            {items.map(({index, key, size, start}) => {\n              const row: RowType = flattened[index]!;\n              const type = row!.type;\n              if (type === 'header') {\n                return (\n                  <RepoRow\n                    repoAddress={row.repoAddress}\n                    key={key}\n                    height={size}\n                    start={start}\n                    onToggle={onToggle}\n                    onToggleAll={onToggleAll}\n                    expanded={expandedKeys.includes(repoAddressAsHumanString(row.repoAddress))}\n                    showLocation={duplicateRepoNames.has(row.repoAddress.name)}\n                    rightElement={\n                      <Tooltip\n                        content={\n                          row.scheduleCount === 1 ? '1 schedule' : `${row.scheduleCount} schedules`\n                        }\n                        placement=\"top\"\n                      >\n                        <Tag>{row.scheduleCount}</Tag>\n                      </Tooltip>\n                    }\n                  />\n                );\n              }\n\n              const scheduleKey = makeScheduleKey(row.repoAddress, row.schedule.name);\n\n              return (\n                <VirtualizedScheduleRow\n                  key={key}\n                  name={row.schedule.name}\n                  scheduleState={row.schedule.scheduleState}\n                  showCheckboxColumn={!!headerCheckbox}\n                  checked={checkedKeys.has(scheduleKey)}\n                  onToggleChecked={onToggleCheckFactory(scheduleKey)}\n                  repoAddress={row.repoAddress}\n                  height={size}\n                  start={start}\n                />\n              );\n            })}\n          </Inner>\n        </Container>\n      </div>\n    </>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {\n  Box,\n  Colors,\n  Heading,\n  NonIdealState,\n  PageHeader,\n  Spinner,\n  TextInput,\n  Tooltip,\n} from '@dagster-io/ui-components';\nimport {useContext, useMemo} from 'react';\n\nimport {BASIC_INSTIGATION_STATE_FRAGMENT} from './BasicInstigationStateFragment';\nimport {OverviewScheduleTable} from './OverviewSchedulesTable';\nimport {OverviewTabs} from './OverviewTabs';\nimport {sortRepoBuckets} from './sortRepoBuckets';\nimport {BasicInstigationStateFragment} from './types/BasicInstigationStateFragment.types';\nimport {\n  OverviewSchedulesQuery,\n  OverviewSchedulesQueryVariables,\n} from './types/OverviewSchedulesRoot.types';\nimport {visibleRepoKeys} from './visibleRepoKeys';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {useSelectionReducer} from '../hooks/useSelectionReducer';\nimport {INSTANCE_HEALTH_FRAGMENT} from '../instance/InstanceHealthFragment';\nimport {filterPermissionedInstigationState} from '../instigation/filterPermissionedInstigationState';\nimport {ScheduleBulkActionMenu} from '../schedules/ScheduleBulkActionMenu';\nimport {SchedulerInfo} from '../schedules/SchedulerInfo';\nimport {makeScheduleKey} from '../schedules/makeScheduleKey';\nimport {CheckAllBox} from '../ui/CheckAllBox';\nimport {useFilters} from '../ui/Filters';\nimport {useCodeLocationFilter} from '../ui/Filters/useCodeLocationFilter';\nimport {useInstigationStatusFilter} from '../ui/Filters/useInstigationStatusFilter';\nimport {SearchInputSpinner} from '../ui/SearchInputSpinner';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nexport const OverviewSchedulesRoot = () => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Schedules');\n\n  const {allRepos, visibleRepos, loading: workspaceLoading} = useContext(WorkspaceContext);\n  const repoCount = allRepos.length;\n  const [searchValue, setSearchValue] = useQueryPersistedState<string>({\n    queryKey: 'search',\n    defaults: {search: ''},\n  });\n\n  const codeLocationFilter = useCodeLocationFilter();\n  const runningStateFilter = useInstigationStatusFilter();\n\n  const filters = useMemo(\n    () => [codeLocationFilter, runningStateFilter],\n    [codeLocationFilter, runningStateFilter],\n  );\n  const {button: filterButton, activeFiltersJsx} = useFilters({filters});\n\n  const queryResultOverview = useQuery<OverviewSchedulesQuery, OverviewSchedulesQueryVariables>(\n    OVERVIEW_SCHEDULES_QUERY,\n    {\n      fetchPolicy: 'network-only',\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n  const {data, loading} = queryResultOverview;\n\n  const refreshState = useQueryRefreshAtInterval(queryResultOverview, FIFTEEN_SECONDS);\n\n  const repoBuckets = useMemo(() => {\n    const visibleKeys = visibleRepoKeys(visibleRepos);\n    return buildBuckets(data).filter(({repoAddress}) =>\n      visibleKeys.has(repoAddressAsHumanString(repoAddress)),\n    );\n  }, [data, visibleRepos]);\n\n  const {state: runningState} = runningStateFilter;\n  const filteredBuckets = useMemo(() => {\n    return repoBuckets.map(({schedules, ...rest}) => {\n      return {\n        ...rest,\n        schedules: runningState.size\n          ? schedules.filter(({scheduleState}) => runningState.has(scheduleState.status))\n          : schedules,\n      };\n    });\n  }, [repoBuckets, runningState]);\n\n  const sanitizedSearch = searchValue.trim().toLocaleLowerCase();\n  const anySearch = sanitizedSearch.length > 0;\n\n  const filteredBySearch = useMemo(() => {\n    const searchToLower = sanitizedSearch.toLocaleLowerCase();\n    return filteredBuckets\n      .map(({repoAddress, schedules}) => ({\n        repoAddress,\n        schedules: schedules.filter(({name}) => name.toLocaleLowerCase().includes(searchToLower)),\n      }))\n      .filter(({schedules}) => schedules.length > 0);\n  }, [filteredBuckets, sanitizedSearch]);\n\n  const anySchedulesVisible = useMemo(\n    () => filteredBySearch.some(({schedules}) => schedules.length > 0),\n    [filteredBySearch],\n  );\n\n  // Collect all schedules across visible code locations that the viewer has permission\n  // to start or stop.\n  const allPermissionedSchedules = useMemo(() => {\n    return repoBuckets\n      .map(({repoAddress, schedules}) => {\n        return schedules\n          .filter(({scheduleState}) => filterPermissionedInstigationState(scheduleState))\n          .map(({name, scheduleState}) => ({\n            repoAddress,\n            scheduleName: name,\n            scheduleState,\n          }));\n      })\n      .flat();\n  }, [repoBuckets]);\n\n  // Build a list of keys from the permissioned schedules for use in checkbox state.\n  // This includes collapsed code locations.\n  const allPermissionedScheduleKeys = useMemo(() => {\n    return allPermissionedSchedules.map(({repoAddress, scheduleName}) =>\n      makeScheduleKey(repoAddress, scheduleName),\n    );\n  }, [allPermissionedSchedules]);\n\n  const [{checkedIds: checkedKeys}, {onToggleFactory, onToggleAll}] = useSelectionReducer(\n    allPermissionedScheduleKeys,\n  );\n\n  // Filter to find keys that are visible given any text search.\n  const permissionedKeysOnScreen = useMemo(() => {\n    const filteredKeys = new Set(\n      filteredBySearch\n        .map(({repoAddress, schedules}) => {\n          return schedules.map(({name}) => makeScheduleKey(repoAddress, name));\n        })\n        .flat(),\n    );\n    return allPermissionedScheduleKeys.filter((key) => filteredKeys.has(key));\n  }, [allPermissionedScheduleKeys, filteredBySearch]);\n\n  // Determine the list of schedule objects that have been checked by the viewer.\n  // These are the schedules that will be operated on by the bulk start/stop action.\n  const checkedSchedules = useMemo(() => {\n    const checkedKeysOnScreen = new Set(\n      permissionedKeysOnScreen.filter((key: string) => checkedKeys.has(key)),\n    );\n    return allPermissionedSchedules.filter(({repoAddress, scheduleName}) => {\n      return checkedKeysOnScreen.has(makeScheduleKey(repoAddress, scheduleName));\n    });\n  }, [permissionedKeysOnScreen, allPermissionedSchedules, checkedKeys]);\n\n  const viewerHasAnyInstigationPermission = allPermissionedScheduleKeys.length > 0;\n  const checkedCount = checkedSchedules.length;\n\n  const content = () => {\n    if (loading && !data) {\n      return (\n        <Box flex={{direction: 'row', justifyContent: 'center'}} style={{paddingTop: '100px'}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 16}}>\n            <Spinner purpose=\"body-text\" />\n            <div style={{color: Colors.textLight()}}>Loading schedules…</div>\n          </Box>\n        </Box>\n      );\n    }\n\n    const anyReposHidden = allRepos.length > visibleRepos.length;\n\n    if (!filteredBySearch.length) {\n      if (anySearch) {\n        return (\n          <Box padding={{top: 20}}>\n            <NonIdealState\n              icon=\"search\"\n              title=\"No matching schedules\"\n              description={\n                anyReposHidden ? (\n                  <div>\n                    No schedules matching <strong>{searchValue}</strong> were found in the selected\n                    code locations\n                  </div>\n                ) : (\n                  <div>\n                    No schedules matching <strong>{searchValue}</strong> were found in your\n                    definitions\n                  </div>\n                )\n              }\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{top: 20}}>\n          <NonIdealState\n            icon=\"search\"\n            title=\"No schedules\"\n            description={\n              anyReposHidden\n                ? 'No matching schedules were found in the selected code locations'\n                : 'No matching schedules were found in your definitions'\n            }\n          />\n        </Box>\n      );\n    }\n\n    return (\n      <OverviewScheduleTable\n        headerCheckbox={\n          viewerHasAnyInstigationPermission ? (\n            <CheckAllBox\n              checkedCount={checkedCount}\n              totalCount={permissionedKeysOnScreen.length}\n              onToggleAll={onToggleAll}\n            />\n          ) : undefined\n        }\n        repos={filteredBySearch}\n        checkedKeys={checkedKeys}\n        onToggleCheckFactory={onToggleFactory}\n      />\n    );\n  };\n\n  const showSearchSpinner = (workspaceLoading && !repoCount) || (loading && !data);\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <PageHeader\n        title={<Heading>Overview</Heading>}\n        tabs={<OverviewTabs tab=\"schedules\" refreshState={refreshState} />}\n      />\n      <Box\n        padding={{horizontal: 24, vertical: 16}}\n        flex={{direction: 'row', alignItems: 'center', justifyContent: 'space-between'}}\n      >\n        <Box flex={{direction: 'row', gap: 12}}>\n          {filterButton}\n          <TextInput\n            icon=\"search\"\n            value={searchValue}\n            rightElement={\n              showSearchSpinner ? (\n                <SearchInputSpinner tooltipContent=\"Loading schedules…\" />\n              ) : undefined\n            }\n            onChange={(e) => {\n              setSearchValue(e.target.value);\n              onToggleAll(false);\n            }}\n            placeholder=\"Filter by schedule name…\"\n            style={{width: '340px'}}\n          />\n        </Box>\n        <Tooltip\n          content=\"You do not have permission to start or stop these schedules\"\n          canShow={anySchedulesVisible && !viewerHasAnyInstigationPermission}\n          placement=\"top-end\"\n          useDisabledButtonTooltipFix\n        >\n          <ScheduleBulkActionMenu\n            schedules={checkedSchedules}\n            onDone={() => refreshState.refetch()}\n          />\n        </Tooltip>\n      </Box>\n      {activeFiltersJsx.length ? (\n        <Box\n          padding={{vertical: 8, horizontal: 24}}\n          border=\"top-and-bottom\"\n          flex={{direction: 'row', gap: 8}}\n        >\n          {activeFiltersJsx}\n        </Box>\n      ) : null}\n      {loading && !repoCount ? (\n        <Box padding={64}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      ) : (\n        <>\n          <SchedulerInfo\n            daemonHealth={data?.instance.daemonHealth}\n            padding={{vertical: 16, horizontal: 24}}\n            border=\"top\"\n          />\n          {content()}\n        </>\n      )}\n    </Box>\n  );\n};\n\ntype RepoBucket = {\n  repoAddress: RepoAddress;\n  schedules: {name: string; scheduleState: BasicInstigationStateFragment}[];\n};\n\nconst buildBuckets = (data?: OverviewSchedulesQuery): RepoBucket[] => {\n  if (data?.workspaceOrError.__typename !== 'Workspace') {\n    return [];\n  }\n\n  const entries = data.workspaceOrError.locationEntries.map((entry) => entry.locationOrLoadError);\n\n  const buckets = [];\n\n  for (const entry of entries) {\n    if (entry?.__typename !== 'RepositoryLocation') {\n      continue;\n    }\n\n    for (const repo of entry.repositories) {\n      const {name, schedules} = repo;\n      const repoAddress = buildRepoAddress(name, entry.name);\n      const scheduleNames = schedules.map(({name, scheduleState}) => ({name, scheduleState}));\n\n      if (scheduleNames.length > 0) {\n        buckets.push({\n          repoAddress,\n          schedules: scheduleNames,\n        });\n      }\n    }\n  }\n\n  return sortRepoBuckets(buckets);\n};\n\nconst OVERVIEW_SCHEDULES_QUERY = gql`\n  query OverviewSchedulesQuery {\n    workspaceOrError {\n      ... on Workspace {\n        id\n        locationEntries {\n          id\n          locationOrLoadError {\n            ... on RepositoryLocation {\n              id\n              name\n              repositories {\n                id\n                name\n                schedules {\n                  id\n                  name\n                  description\n                  scheduleState {\n                    id\n                    ...BasicInstigationStateFragment\n                  }\n                }\n              }\n            }\n            ...PythonErrorFragment\n          }\n        }\n      }\n      ...PythonErrorFragment\n    }\n    instance {\n      id\n      ...InstanceHealthFragment\n    }\n  }\n\n  ${BASIC_INSTIGATION_STATE_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n  ${INSTANCE_HEALTH_FRAGMENT}\n`;\n","import {Tag, Tooltip} from '@dagster-io/ui-components';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport * as React from 'react';\n\nimport {OVERVIEW_COLLAPSED_KEY} from './OverviewExpansionKey';\nimport {BasicInstigationStateFragment} from './types/BasicInstigationStateFragment.types';\nimport {makeSensorKey} from '../sensors/makeSensorKey';\nimport {Container, Inner} from '../ui/VirtualizedTable';\nimport {findDuplicateRepoNames} from '../ui/findDuplicateRepoNames';\nimport {useRepoExpansionState} from '../ui/useRepoExpansionState';\nimport {VirtualizedSensorHeader, VirtualizedSensorRow} from '../workspace/VirtualizedSensorRow';\nimport {RepoRow} from '../workspace/VirtualizedWorkspaceTable';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\ntype SensorInfo = {name: string; sensorState: BasicInstigationStateFragment};\n\ntype Repository = {\n  repoAddress: RepoAddress;\n  sensors: SensorInfo[];\n};\n\ninterface Props {\n  repos: Repository[];\n  headerCheckbox: React.ReactNode;\n  checkedKeys: Set<string>;\n  onToggleCheckFactory: (path: string) => (values: {checked: boolean; shiftKey: boolean}) => void;\n}\n\ntype RowType =\n  | {type: 'header'; repoAddress: RepoAddress; sensorCount: number}\n  | {type: 'sensor'; repoAddress: RepoAddress; sensor: SensorInfo};\n\nexport const OverviewSensorTable = ({\n  repos,\n  headerCheckbox,\n  checkedKeys,\n  onToggleCheckFactory,\n}: Props) => {\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n  const allKeys = React.useMemo(\n    () => repos.map(({repoAddress}) => repoAddressAsHumanString(repoAddress)),\n    [repos],\n  );\n  const {expandedKeys, onToggle, onToggleAll} = useRepoExpansionState(\n    OVERVIEW_COLLAPSED_KEY,\n    allKeys,\n  );\n\n  const flattened: RowType[] = React.useMemo(() => {\n    const flat: RowType[] = [];\n    repos.forEach(({repoAddress, sensors}) => {\n      flat.push({type: 'header', repoAddress, sensorCount: sensors.length});\n      const repoKey = repoAddressAsHumanString(repoAddress);\n      if (expandedKeys.includes(repoKey)) {\n        sensors.forEach((sensor) => {\n          flat.push({type: 'sensor', repoAddress, sensor});\n        });\n      }\n    });\n    return flat;\n  }, [repos, expandedKeys]);\n\n  const duplicateRepoNames = findDuplicateRepoNames(repos.map(({repoAddress}) => repoAddress.name));\n\n  const rowVirtualizer = useVirtualizer({\n    count: flattened.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: (ii: number) => {\n      const row = flattened[ii];\n      return row?.type === 'header' ? 32 : 64;\n    },\n    overscan: 10,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  return (\n    <>\n      <VirtualizedSensorHeader checkbox={headerCheckbox} />\n      <div style={{overflow: 'hidden'}}>\n        <Container ref={parentRef}>\n          <Inner $totalHeight={totalHeight}>\n            {items.map(({index, key, size, start}) => {\n              const row: RowType = flattened[index]!;\n              const type = row!.type;\n              if (type === 'header') {\n                return (\n                  <RepoRow\n                    repoAddress={row.repoAddress}\n                    key={key}\n                    height={size}\n                    start={start}\n                    onToggle={onToggle}\n                    onToggleAll={onToggleAll}\n                    expanded={expandedKeys.includes(repoAddressAsHumanString(row.repoAddress))}\n                    showLocation={duplicateRepoNames.has(row.repoAddress.name)}\n                    rightElement={\n                      <Tooltip\n                        content={row.sensorCount === 1 ? '1 sensor' : `${row.sensorCount} sensors`}\n                        placement=\"top\"\n                      >\n                        <Tag>{row.sensorCount}</Tag>\n                      </Tooltip>\n                    }\n                  />\n                );\n              }\n\n              const sensorKey = makeSensorKey(row.repoAddress, row.sensor.name);\n\n              return (\n                <VirtualizedSensorRow\n                  key={key}\n                  name={row.sensor.name}\n                  sensorState={row.sensor.sensorState}\n                  showCheckboxColumn={!!headerCheckbox}\n                  checked={checkedKeys.has(sensorKey)}\n                  onToggleChecked={onToggleCheckFactory(sensorKey)}\n                  repoAddress={row.repoAddress}\n                  height={size}\n                  start={start}\n                />\n              );\n            })}\n          </Inner>\n        </Container>\n      </div>\n    </>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {\n  Box,\n  Colors,\n  Heading,\n  NonIdealState,\n  PageHeader,\n  Spinner,\n  TextInput,\n  Tooltip,\n} from '@dagster-io/ui-components';\nimport {useContext, useMemo, useState} from 'react';\n\nimport {BASIC_INSTIGATION_STATE_FRAGMENT} from './BasicInstigationStateFragment';\nimport {OverviewSensorTable} from './OverviewSensorsTable';\nimport {OverviewTabs} from './OverviewTabs';\nimport {sortRepoBuckets} from './sortRepoBuckets';\nimport {BasicInstigationStateFragment} from './types/BasicInstigationStateFragment.types';\nimport {\n  OverviewSensorsQuery,\n  OverviewSensorsQueryVariables,\n} from './types/OverviewSensorsRoot.types';\nimport {visibleRepoKeys} from './visibleRepoKeys';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {SensorType} from '../graphql/types';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {useSelectionReducer} from '../hooks/useSelectionReducer';\nimport {INSTANCE_HEALTH_FRAGMENT} from '../instance/InstanceHealthFragment';\nimport {filterPermissionedInstigationState} from '../instigation/filterPermissionedInstigationState';\nimport {SensorBulkActionMenu} from '../sensors/SensorBulkActionMenu';\nimport {SensorInfo} from '../sensors/SensorInfo';\nimport {makeSensorKey} from '../sensors/makeSensorKey';\nimport {CheckAllBox} from '../ui/CheckAllBox';\nimport {useFilters} from '../ui/Filters';\nimport {useCodeLocationFilter} from '../ui/Filters/useCodeLocationFilter';\nimport {useInstigationStatusFilter} from '../ui/Filters/useInstigationStatusFilter';\nimport {useStaticSetFilter} from '../ui/Filters/useStaticSetFilter';\nimport {SearchInputSpinner} from '../ui/SearchInputSpinner';\nimport {SENSOR_TYPE_META} from '../workspace/VirtualizedSensorRow';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nfunction toSetFilterValue(type: SensorType) {\n  const label = SENSOR_TYPE_META[type].name;\n  return {\n    label,\n    value: {type, label},\n    match: [label],\n  };\n}\n\nconst SENSOR_TYPE_TO_FILTER: Partial<Record<SensorType, ReturnType<typeof toSetFilterValue>>> = {\n  [SensorType.ASSET]: toSetFilterValue(SensorType.ASSET),\n  [SensorType.AUTO_MATERIALIZE]: toSetFilterValue(SensorType.AUTO_MATERIALIZE),\n  [SensorType.FRESHNESS_POLICY]: toSetFilterValue(SensorType.FRESHNESS_POLICY),\n  [SensorType.MULTI_ASSET]: toSetFilterValue(SensorType.MULTI_ASSET),\n  [SensorType.RUN_STATUS]: toSetFilterValue(SensorType.RUN_STATUS),\n  [SensorType.STANDARD]: toSetFilterValue(SensorType.STANDARD),\n};\nconst ALL_SENSOR_TYPE_FILTERS = Object.values(SENSOR_TYPE_TO_FILTER);\n\nexport const OverviewSensorsRoot = () => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Sensors');\n\n  const {allRepos, visibleRepos, loading: workspaceLoading} = useContext(WorkspaceContext);\n  const repoCount = allRepos.length;\n  const [searchValue, setSearchValue] = useQueryPersistedState<string>({\n    queryKey: 'search',\n    defaults: {search: ''},\n  });\n\n  const codeLocationFilter = useCodeLocationFilter();\n  const runningStateFilter = useInstigationStatusFilter();\n\n  const [sensorTypes, setSensorTypes] = useState<Set<SensorType>>(() => new Set());\n\n  const sensorTypeFilter = useStaticSetFilter({\n    name: 'Sensor type',\n    allValues: ALL_SENSOR_TYPE_FILTERS,\n    icon: 'sensors',\n    getStringValue: (value) => value.label,\n    state: useMemo(() => {\n      return new Set(Array.from(sensorTypes).map((type) => SENSOR_TYPE_TO_FILTER[type]!.value));\n    }, [sensorTypes]),\n\n    renderLabel: ({value}) => <span>{value.label}</span>,\n    onStateChanged: (state) => {\n      setSensorTypes(new Set(Array.from(state).map((value) => value.type)));\n    },\n  });\n\n  const filters = useMemo(\n    () => [codeLocationFilter, runningStateFilter, sensorTypeFilter],\n    [codeLocationFilter, runningStateFilter, sensorTypeFilter],\n  );\n  const {button: filterButton, activeFiltersJsx} = useFilters({filters});\n\n  const queryResultOverview = useQuery<OverviewSensorsQuery, OverviewSensorsQueryVariables>(\n    OVERVIEW_SENSORS_QUERY,\n    {\n      fetchPolicy: 'network-only',\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n  const {data, loading} = queryResultOverview;\n\n  const refreshState = useQueryRefreshAtInterval(queryResultOverview, FIFTEEN_SECONDS);\n\n  const repoBuckets = useMemo(() => {\n    const visibleKeys = visibleRepoKeys(visibleRepos);\n    return buildBuckets(data).filter(({repoAddress}) =>\n      visibleKeys.has(repoAddressAsHumanString(repoAddress)),\n    );\n  }, [data, visibleRepos]);\n\n  const {state: runningState} = runningStateFilter;\n\n  const filteredBuckets = useMemo(() => {\n    return repoBuckets.map(({sensors, ...rest}) => {\n      return {\n        ...rest,\n        sensors: sensors.filter(({sensorState, sensorType}) => {\n          if (runningState.size && !runningState.has(sensorState.status)) {\n            return false;\n          }\n          if (sensorTypes.size && !sensorTypes.has(sensorType)) {\n            return false;\n          }\n          return true;\n        }),\n      };\n    });\n  }, [repoBuckets, runningState, sensorTypes]);\n\n  const sanitizedSearch = searchValue.trim().toLocaleLowerCase();\n  const anySearch = sanitizedSearch.length > 0;\n\n  const filteredBySearch = useMemo(() => {\n    const searchToLower = sanitizedSearch.toLocaleLowerCase();\n    return filteredBuckets\n      .map(({repoAddress, sensors}) => ({\n        repoAddress,\n        sensors: sensors.filter(({name}) => name.toLocaleLowerCase().includes(searchToLower)),\n      }))\n      .filter(({sensors}) => sensors.length > 0);\n  }, [filteredBuckets, sanitizedSearch]);\n\n  const anySensorsVisible = useMemo(\n    () => filteredBySearch.some(({sensors}) => sensors.length > 0),\n    [filteredBySearch],\n  );\n\n  // Collect all sensors across visible code locations that the viewer has permission\n  // to start or stop.\n  const allPermissionedSensors = useMemo(() => {\n    return repoBuckets\n      .map(({repoAddress, sensors}) => {\n        return sensors\n          .filter(({sensorState}) => filterPermissionedInstigationState(sensorState))\n          .map(({name, sensorState}) => ({\n            repoAddress,\n            sensorName: name,\n            sensorState,\n          }));\n      })\n      .flat();\n  }, [repoBuckets]);\n\n  // Build a list of keys from the permissioned schedules for use in checkbox state.\n  // This includes collapsed code locations.\n  const allPermissionedSensorKeys = useMemo(() => {\n    return allPermissionedSensors.map(({repoAddress, sensorName}) =>\n      makeSensorKey(repoAddress, sensorName),\n    );\n  }, [allPermissionedSensors]);\n\n  const [{checkedIds: checkedKeys}, {onToggleFactory, onToggleAll}] =\n    useSelectionReducer(allPermissionedSensorKeys);\n\n  // Filter to find keys that are visible given any text search.\n  const permissionedKeysOnScreen = useMemo(() => {\n    const filteredKeys = new Set(\n      filteredBySearch\n        .map(({repoAddress, sensors}) => {\n          return sensors.map(({name}) => makeSensorKey(repoAddress, name));\n        })\n        .flat(),\n    );\n    return allPermissionedSensorKeys.filter((key) => filteredKeys.has(key));\n  }, [allPermissionedSensorKeys, filteredBySearch]);\n\n  // Determine the list of sensor objects that have been checked by the viewer.\n  // These are the sensors that will be operated on by the bulk start/stop action.\n  const checkedSensors = useMemo(() => {\n    const checkedKeysOnScreen = new Set(\n      permissionedKeysOnScreen.filter((key: string) => checkedKeys.has(key)),\n    );\n    return allPermissionedSensors.filter(({repoAddress, sensorName}) => {\n      return checkedKeysOnScreen.has(makeSensorKey(repoAddress, sensorName));\n    });\n  }, [permissionedKeysOnScreen, allPermissionedSensors, checkedKeys]);\n\n  const viewerHasAnyInstigationPermission = allPermissionedSensorKeys.length > 0;\n  const checkedCount = checkedSensors.length;\n\n  const content = () => {\n    if (loading && !data) {\n      return (\n        <Box flex={{direction: 'row', justifyContent: 'center'}} style={{paddingTop: '100px'}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 16}}>\n            <Spinner purpose=\"body-text\" />\n            <div style={{color: Colors.textLight()}}>Loading sensors…</div>\n          </Box>\n        </Box>\n      );\n    }\n\n    const anyReposHidden = allRepos.length > visibleRepos.length;\n\n    if (!filteredBySearch.length) {\n      if (anySearch) {\n        return (\n          <Box padding={{top: 20}}>\n            <NonIdealState\n              icon=\"search\"\n              title=\"No matching sensors\"\n              description={\n                anyReposHidden ? (\n                  <div>\n                    No sensors matching <strong>{searchValue}</strong> were found in the selected\n                    code locations\n                  </div>\n                ) : (\n                  <div>\n                    No sensors matching <strong>{searchValue}</strong> were found in your\n                    definitions\n                  </div>\n                )\n              }\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{top: 20}}>\n          <NonIdealState\n            icon=\"search\"\n            title=\"No sensors\"\n            description={\n              anyReposHidden\n                ? 'No sensors were found in the selected code locations'\n                : 'No sensors were found in your definitions'\n            }\n          />\n        </Box>\n      );\n    }\n\n    return (\n      <OverviewSensorTable\n        headerCheckbox={\n          viewerHasAnyInstigationPermission ? (\n            <CheckAllBox\n              checkedCount={checkedCount}\n              totalCount={permissionedKeysOnScreen.length}\n              onToggleAll={onToggleAll}\n            />\n          ) : undefined\n        }\n        repos={filteredBySearch}\n        checkedKeys={checkedKeys}\n        onToggleCheckFactory={onToggleFactory}\n      />\n    );\n  };\n\n  const showSearchSpinner = (workspaceLoading && !repoCount) || (loading && !data);\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <PageHeader\n        title={<Heading>Overview</Heading>}\n        tabs={<OverviewTabs tab=\"sensors\" refreshState={refreshState} />}\n      />\n      <Box\n        padding={{horizontal: 24, vertical: 16}}\n        flex={{\n          direction: 'row',\n          alignItems: 'center',\n          justifyContent: 'space-between',\n          gap: 12,\n          grow: 0,\n        }}\n      >\n        <Box flex={{direction: 'row', gap: 12}}>\n          {filterButton}\n          <TextInput\n            icon=\"search\"\n            value={searchValue}\n            rightElement={\n              showSearchSpinner ? (\n                <SearchInputSpinner tooltipContent=\"Loading sensors…\" />\n              ) : undefined\n            }\n            onChange={(e) => setSearchValue(e.target.value)}\n            placeholder=\"Filter by sensor name…\"\n            style={{width: '340px'}}\n          />\n        </Box>\n        <Tooltip\n          content=\"You do not have permission to start or stop these schedules\"\n          canShow={anySensorsVisible && !viewerHasAnyInstigationPermission}\n          placement=\"top-end\"\n          useDisabledButtonTooltipFix\n        >\n          <SensorBulkActionMenu sensors={checkedSensors} onDone={() => refreshState.refetch()} />\n        </Tooltip>\n      </Box>\n      {activeFiltersJsx.length ? (\n        <Box\n          padding={{vertical: 8, horizontal: 24}}\n          border=\"top-and-bottom\"\n          flex={{direction: 'row', gap: 8}}\n        >\n          {activeFiltersJsx}\n        </Box>\n      ) : null}\n      {loading && !repoCount ? (\n        <Box padding={64}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      ) : (\n        <>\n          <SensorInfo\n            daemonHealth={data?.instance.daemonHealth}\n            padding={{vertical: 16, horizontal: 24}}\n            border=\"top\"\n          />\n          {content()}\n        </>\n      )}\n    </Box>\n  );\n};\n\ntype RepoBucket = {\n  repoAddress: RepoAddress;\n  sensors: {name: string; sensorType: SensorType; sensorState: BasicInstigationStateFragment}[];\n};\n\nconst buildBuckets = (data?: OverviewSensorsQuery): RepoBucket[] => {\n  if (data?.workspaceOrError.__typename !== 'Workspace') {\n    return [];\n  }\n\n  const entries = data.workspaceOrError.locationEntries.map((entry) => entry.locationOrLoadError);\n\n  const buckets = [];\n\n  for (const entry of entries) {\n    if (entry?.__typename !== 'RepositoryLocation') {\n      continue;\n    }\n\n    for (const repo of entry.repositories) {\n      const {name, sensors} = repo;\n      const repoAddress = buildRepoAddress(name, entry.name);\n\n      if (sensors.length > 0) {\n        buckets.push({\n          repoAddress,\n          sensors,\n        });\n      }\n    }\n  }\n\n  return sortRepoBuckets(buckets);\n};\n\nconst OVERVIEW_SENSORS_QUERY = gql`\n  query OverviewSensorsQuery {\n    workspaceOrError {\n      ... on Workspace {\n        id\n        locationEntries {\n          id\n          locationOrLoadError {\n            ... on RepositoryLocation {\n              id\n              name\n              repositories {\n                id\n                name\n                sensors {\n                  id\n                  name\n                  description\n                  sensorType\n                  sensorState {\n                    id\n                    ...BasicInstigationStateFragment\n                  }\n                }\n              }\n            }\n            ...PythonErrorFragment\n          }\n        }\n      }\n      ...PythonErrorFragment\n    }\n    instance {\n      id\n      ...InstanceHealthFragment\n    }\n  }\n\n  ${BASIC_INSTIGATION_STATE_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n  ${INSTANCE_HEALTH_FRAGMENT}\n`;\n","import {useCallback, useEffect, useMemo} from 'react';\n\nimport {ASSET_DAEMON_TICKS_QUERY} from './AssetDaemonTicksQuery';\nimport {AutomaterializationEvaluationHistoryTable} from './AutomaterializationEvaluationHistoryTable';\nimport {\n  AssetDaemonTickFragment,\n  AssetDaemonTicksQuery,\n  AssetDaemonTicksQueryVariables,\n} from './types/AssetDaemonTicksQuery.types';\nimport {useQueryRefreshAtInterval} from '../../app/QueryRefresh';\nimport {InstigationTickStatus} from '../../graphql/types';\nimport {useQueryPersistedState} from '../../hooks/useQueryPersistedState';\nimport {useCursorPaginatedQuery} from '../../runs/useCursorPaginatedQuery';\n\nconst PAGE_SIZE = 15;\n\ninterface Props {\n  setSelectedTick: (tick: AssetDaemonTickFragment | null) => void;\n  setTableView: (view: 'evaluations' | 'runs') => void;\n  setTimerange: (range?: [number, number]) => void;\n  setParentStatuses: (statuses?: InstigationTickStatus[]) => void;\n}\n\nexport const InstanceAutomaterializationEvaluationHistoryTable = ({\n  setSelectedTick,\n  setTableView,\n  setTimerange,\n  setParentStatuses,\n}: Props) => {\n  const [statuses, setStatuses] = useQueryPersistedState<Set<InstigationTickStatus>>({\n    queryKey: 'statuses',\n    decode: useCallback(({statuses}: {statuses?: string}) => {\n      return new Set<InstigationTickStatus>(\n        statuses\n          ? JSON.parse(statuses)\n          : [\n              InstigationTickStatus.STARTED,\n              InstigationTickStatus.SUCCESS,\n              InstigationTickStatus.FAILURE,\n              InstigationTickStatus.SKIPPED,\n            ],\n      );\n    }, []),\n    encode: useCallback((raw: Set<InstigationTickStatus>) => {\n      return {statuses: JSON.stringify(Array.from(raw))};\n    }, []),\n  });\n\n  const {queryResult, paginationProps} = useCursorPaginatedQuery<\n    AssetDaemonTicksQuery,\n    AssetDaemonTicksQueryVariables\n  >({\n    query: ASSET_DAEMON_TICKS_QUERY,\n    variables: {\n      statuses: useMemo(() => Array.from(statuses), [statuses]),\n    },\n    nextCursorForResult: (data) => {\n      const ticks = data.autoMaterializeTicks;\n      if (!ticks.length) {\n        return undefined;\n      }\n      return ticks[PAGE_SIZE - 1]?.id;\n    },\n    getResultArray: (data) => {\n      if (!data?.autoMaterializeTicks) {\n        return [];\n      }\n      return data.autoMaterializeTicks;\n    },\n    pageSize: PAGE_SIZE,\n  });\n\n  // Only refresh if we're on the first page\n  useQueryRefreshAtInterval(queryResult, 10000, !paginationProps.hasPrevCursor);\n\n  useEffect(() => {\n    if (paginationProps.hasPrevCursor) {\n      const ticks = queryResult.data?.autoMaterializeTicks;\n      if (ticks && ticks.length) {\n        const start = ticks[ticks.length - 1]?.timestamp;\n        const end = ticks[0]?.endTimestamp;\n        if (start && end) {\n          setTimerange([start, end]);\n        }\n      }\n    } else {\n      setTimerange(undefined);\n    }\n  }, [paginationProps.hasPrevCursor, queryResult.data?.autoMaterializeTicks, setTimerange]);\n\n  useEffect(() => {\n    if (paginationProps.hasPrevCursor) {\n      setParentStatuses(Array.from(statuses));\n    } else {\n      setParentStatuses(undefined);\n    }\n  }, [paginationProps.hasPrevCursor, setParentStatuses, statuses]);\n\n  return (\n    <AutomaterializationEvaluationHistoryTable\n      loading={queryResult.loading}\n      ticks={queryResult.data?.autoMaterializeTicks || []}\n      paginationProps={paginationProps}\n      setSelectedTick={setSelectedTick}\n      setStatuses={setStatuses}\n      setTableView={setTableView}\n      statuses={statuses}\n    />\n  );\n};\n","import {useLazyQuery} from '@apollo/client';\nimport {\n  Alert,\n  Box,\n  Checkbox,\n  Colors,\n  Heading,\n  Page,\n  PageHeader,\n  Spinner,\n  Subtitle2,\n  Table,\n} from '@dagster-io/ui-components';\nimport {useCallback, useLayoutEffect, useMemo, useState} from 'react';\nimport {Redirect} from 'react-router-dom';\n\nimport {ASSET_DAEMON_TICKS_QUERY} from './AssetDaemonTicksQuery';\nimport {AutomaterializationTickDetailDialog} from './AutomaterializationTickDetailDialog';\nimport {AutomaterializeRunHistoryTable} from './AutomaterializeRunHistoryTable';\nimport {InstanceAutomaterializationEvaluationHistoryTable} from './InstanceAutomaterializationEvaluationHistoryTable';\nimport {\n  AssetDaemonTickFragment,\n  AssetDaemonTicksQuery,\n  AssetDaemonTicksQueryVariables,\n} from './types/AssetDaemonTicksQuery.types';\nimport {useConfirmation} from '../../app/CustomConfirmationProvider';\nimport {useUnscopedPermissions} from '../../app/Permissions';\nimport {useQueryRefreshAtInterval} from '../../app/QueryRefresh';\nimport {assertUnreachable} from '../../app/Util';\nimport {useTrackPageView} from '../../app/analytics';\nimport {InstigationTickStatus} from '../../graphql/types';\nimport {useQueryPersistedState} from '../../hooks/useQueryPersistedState';\nimport {LiveTickTimeline} from '../../instigation/LiveTickTimeline2';\nimport {isStuckStartedTick} from '../../instigation/util';\nimport {OverviewTabs} from '../../overview/OverviewTabs';\nimport {useAutoMaterializeSensorFlag} from '../AutoMaterializeSensorFlag';\nimport {useAutomaterializeDaemonStatus} from '../useAutomaterializeDaemonStatus';\n\nconst MINUTE = 60 * 1000;\nconst THREE_MINUTES = 3 * MINUTE;\nconst FIVE_MINUTES = 5 * MINUTE;\nconst TWENTY_MINUTES = 20 * MINUTE;\n\n// Determine whether the user is flagged to see automaterialize policies as\n// sensors. If so, redirect to the Sensors overview.\nexport const AutomaterializationRoot = () => {\n  const automaterializeSensorsFlagState = useAutoMaterializeSensorFlag();\n  switch (automaterializeSensorsFlagState) {\n    case 'unknown':\n      return <div />; // Waiting for result\n    case 'has-global-amp':\n      return <GlobalAutomaterializationRoot />;\n    case 'has-sensor-amp':\n      return <Redirect to=\"/overview/sensors\" />;\n    default:\n      assertUnreachable(automaterializeSensorsFlagState);\n  }\n};\n\nconst GlobalAutomaterializationRoot = () => {\n  useTrackPageView();\n\n  const automaterialize = useAutomaterializeDaemonStatus();\n  const confirm = useConfirmation();\n\n  const {permissions: {canToggleAutoMaterialize} = {}} = useUnscopedPermissions();\n\n  const [fetch, queryResult] = useLazyQuery<AssetDaemonTicksQuery, AssetDaemonTicksQueryVariables>(\n    ASSET_DAEMON_TICKS_QUERY,\n  );\n  const [isPaused, setIsPaused] = useState(false);\n  const [statuses, setStatuses] = useState<undefined | InstigationTickStatus[]>(undefined);\n  const [timeRange, setTimerange] = useState<undefined | [number, number]>(undefined);\n  const variables: AssetDaemonTicksQueryVariables = useMemo(() => {\n    if (timeRange || statuses) {\n      return {\n        afterTimestamp: timeRange?.[0],\n        beforeTimestamp: timeRange?.[1],\n        statuses,\n      };\n    }\n    return {\n      afterTimestamp: (Date.now() - TWENTY_MINUTES) / 1000,\n    };\n  }, [statuses, timeRange]);\n  function fetchData() {\n    fetch({\n      variables,\n    });\n  }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useLayoutEffect(fetchData, [variables]);\n  useQueryRefreshAtInterval(queryResult, 2 * 1000, !isPaused && !timeRange && !statuses, fetchData);\n\n  const [selectedTick, setSelectedTick] = useState<AssetDaemonTickFragment | null>(null);\n\n  const [tableView, setTableView] = useQueryPersistedState<'evaluations' | 'runs'>(\n    useMemo(\n      () => ({\n        queryKey: 'view',\n        decode: ({view}) => (view === 'runs' ? 'runs' : 'evaluations'),\n        encode: (raw) => {\n          return {view: raw, cursor: undefined, statuses: undefined};\n        },\n      }),\n      [],\n    ),\n  );\n\n  const data = queryResult.data ?? queryResult.previousData;\n\n  const ids = data ? data.autoMaterializeTicks.map((tick) => `${tick.id}:${tick.status}`) : [];\n  while (ids.length < 100) {\n    // Super hacky but we need to keep the memo args length the same...\n    // And the memo below prevents us from changing the ticks reference every second\n    // which avoids a bunch of re-rendering\n    ids.push('');\n  }\n\n  const ticks = useMemo(\n    () => {\n      const ticks = data?.autoMaterializeTicks;\n      return (\n        ticks?.map((tick, index) => {\n          const nextTick = ticks[index - 1];\n          // For ticks that get stuck in \"Started\" state without an endTimestamp.\n          if (nextTick && isStuckStartedTick(tick, index)) {\n            const copy = {...tick};\n            copy.endTimestamp = nextTick.timestamp;\n            copy.status = InstigationTickStatus.FAILURE;\n            return copy;\n          }\n          return tick;\n        }) ?? []\n      );\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [...ids.slice(0, 100)],\n  );\n\n  const onHoverTick = useCallback(\n    (tick: AssetDaemonTickFragment | undefined) => {\n      setIsPaused(!!tick);\n    },\n    [setIsPaused],\n  );\n\n  return (\n    <Page>\n      <PageHeader title={<Heading>Overview</Heading>} tabs={<OverviewTabs tab=\"amp\" />} />\n      <Box padding={{vertical: 12, horizontal: 24}} flex={{direction: 'column', gap: 12}}>\n        <Alert\n          intent=\"info\"\n          title=\"[Experimental] Dagster can automatically materialize assets when criteria are met.\"\n          description={\n            <>\n              Auto-materialization enables a declarative approach to asset scheduling – instead of\n              defining imperative workflows to materialize your assets, you just describe the\n              conditions under which they should be materialized.{' '}\n              <a\n                href=\"https://docs.dagster.io/concepts/assets/asset-auto-execution\"\n                target=\"_blank\"\n                rel=\"noreferrer\"\n              >\n                Learn more about auto-materialization here\n              </a>\n              .\n            </>\n          }\n        />\n      </Box>\n      <Table>\n        <tbody>\n          <tr>\n            <td>Running</td>\n            <td>\n              {automaterialize.loading ? (\n                <Spinner purpose=\"body-text\" />\n              ) : (\n                <Checkbox\n                  format=\"switch\"\n                  checked={!automaterialize.paused}\n                  disabled={!canToggleAutoMaterialize}\n                  onChange={async (e) => {\n                    const checked = e.target.checked;\n                    if (!checked) {\n                      await confirm({\n                        title: 'Pause Auto-materializing?',\n                        description:\n                          'Pausing Auto-materializing will prevent new materializations triggered by an Auto-materializing policy.',\n                      });\n                    }\n                    automaterialize.setPaused(!checked);\n                  }}\n                />\n              )}\n            </td>\n          </tr>\n          <tr>\n            <td>Evaluation frequency</td>\n            <td>~30s</td>\n          </tr>\n        </tbody>\n      </Table>\n      <Box padding={{vertical: 12, horizontal: 24}} border=\"bottom\">\n        <Subtitle2>Evaluation timeline</Subtitle2>\n      </Box>\n      {!data ? (\n        <Box\n          padding={{vertical: 48}}\n          flex={{direction: 'row', justifyContent: 'center', gap: 12, alignItems: 'center'}}\n        >\n          <Spinner purpose=\"body-text\" />\n          <div style={{color: Colors.textLight()}}>Loading evaluations…</div>\n        </Box>\n      ) : (\n        <>\n          <LiveTickTimeline\n            ticks={ticks}\n            onHoverTick={onHoverTick}\n            onSelectTick={setSelectedTick}\n            exactRange={timeRange}\n            timeRange={TWENTY_MINUTES}\n            tickGrid={FIVE_MINUTES}\n            timeAfter={THREE_MINUTES}\n          />\n          <AutomaterializationTickDetailDialog\n            tick={selectedTick}\n            isOpen={!!selectedTick}\n            close={() => {\n              setSelectedTick(null);\n            }}\n          />\n          {tableView === 'evaluations' ? (\n            <InstanceAutomaterializationEvaluationHistoryTable\n              setSelectedTick={setSelectedTick}\n              setTableView={setTableView}\n              setParentStatuses={setStatuses}\n              setTimerange={setTimerange}\n            />\n          ) : (\n            <AutomaterializeRunHistoryTable setTableView={setTableView} />\n          )}\n        </>\n      )}\n    </Page>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {\n  Box,\n  Colors,\n  CursorPaginationControls,\n  Heading,\n  NonIdealState,\n  Page,\n  PageHeader,\n  Spinner,\n} from '@dagster-io/ui-components';\n\nimport {INSTANCE_HEALTH_FRAGMENT} from './InstanceHealthFragment';\nimport {BACKFILL_TABLE_FRAGMENT, BackfillTable} from './backfill/BackfillTable';\nimport {\n  InstanceBackfillsQuery,\n  InstanceBackfillsQueryVariables,\n  InstanceHealthForBackfillsQuery,\n  InstanceHealthForBackfillsQueryVariables,\n} from './types/InstanceBackfills.types';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {BulkActionStatus} from '../graphql/types';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {OverviewTabs} from '../overview/OverviewTabs';\nimport {DaemonNotRunningAlertBody} from '../partitions/BackfillMessaging';\nimport {useCursorPaginatedQuery} from '../runs/useCursorPaginatedQuery';\nimport {useFilters} from '../ui/Filters';\nimport {useStaticSetFilter} from '../ui/Filters/useStaticSetFilter';\n\nconst PAGE_SIZE = 10;\n\nconst labelForBackfillStatus = (key: BulkActionStatus) => {\n  switch (key) {\n    case BulkActionStatus.CANCELED:\n      return 'Canceled';\n    case BulkActionStatus.CANCELING:\n      return 'Canceling';\n    case BulkActionStatus.COMPLETED:\n      return 'Completed';\n    case BulkActionStatus.FAILED:\n      return 'Failed';\n    case BulkActionStatus.REQUESTED:\n      return 'In progress';\n  }\n};\n\nconst backfillStatusValues = Object.keys(BulkActionStatus).map((key) => {\n  const status = key as BulkActionStatus;\n  const label = labelForBackfillStatus(status);\n  return {\n    label,\n    value: status,\n    match: [status, label],\n  };\n});\n\nexport const InstanceBackfills = () => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Backfills');\n\n  const queryData = useQuery<\n    InstanceHealthForBackfillsQuery,\n    InstanceHealthForBackfillsQueryVariables\n  >(INSTANCE_HEALTH_FOR_BACKFILLS_QUERY);\n\n  const statusFilter = useStaticSetFilter<BulkActionStatus>({\n    name: 'Status',\n    icon: 'status',\n    allValues: backfillStatusValues,\n    allowMultipleSelections: false,\n    closeOnSelect: true,\n    renderLabel: ({value}) => <div>{labelForBackfillStatus(value)}</div>,\n    getStringValue: (status) => labelForBackfillStatus(status),\n  });\n\n  const {state: statusState} = statusFilter;\n\n  const {button, activeFiltersJsx} = useFilters({filters: [statusFilter]});\n\n  const {queryResult, paginationProps} = useCursorPaginatedQuery<\n    InstanceBackfillsQuery,\n    InstanceBackfillsQueryVariables\n  >({\n    query: BACKFILLS_QUERY,\n    variables: {\n      status: statusState.size > 0 ? Array.from(statusState)[0]! : undefined,\n    },\n    pageSize: PAGE_SIZE,\n    nextCursorForResult: (result) =>\n      result.partitionBackfillsOrError.__typename === 'PartitionBackfills'\n        ? result.partitionBackfillsOrError.results[PAGE_SIZE - 1]?.id\n        : undefined,\n    getResultArray: (result) =>\n      result?.partitionBackfillsOrError.__typename === 'PartitionBackfills'\n        ? result.partitionBackfillsOrError.results\n        : [],\n  });\n\n  const refreshState = useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n  const {loading, data} = queryResult;\n\n  const content = () => {\n    if (loading && !data) {\n      return (\n        <Box padding={{vertical: 64}} flex={{direction: 'column', alignItems: 'center'}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 8}}>\n            <Spinner purpose=\"body-text\" />\n            <div style={{color: Colors.textLight()}}>Loading backfills…</div>\n          </Box>\n        </Box>\n      );\n    }\n\n    const partitionBackfillsOrError = data?.partitionBackfillsOrError;\n    if (partitionBackfillsOrError?.__typename === 'PythonError') {\n      return <PythonErrorInfo error={partitionBackfillsOrError} />;\n    }\n\n    if (!partitionBackfillsOrError || !partitionBackfillsOrError?.results.length) {\n      if (statusState.size > 0) {\n        return (\n          <Box padding={{vertical: 64}}>\n            <NonIdealState\n              icon=\"no-results\"\n              title=\"No matching backfills\"\n              description=\"No backfills were found for this filter.\"\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{vertical: 64}}>\n          <NonIdealState\n            icon=\"no-results\"\n            title=\"No backfills found\"\n            description=\"This instance does not have any backfill jobs.\"\n          />\n        </Box>\n      );\n    }\n\n    const daemonHealths = queryData.data?.instance.daemonHealth.allDaemonStatuses || [];\n    const backfillHealths = daemonHealths\n      .filter((daemon) => daemon.daemonType === 'BACKFILL')\n      .map((daemon) => daemon.required && daemon.healthy);\n    const isBackfillHealthy = backfillHealths.length && backfillHealths.every((x) => x);\n\n    return (\n      <div>\n        {isBackfillHealthy ? null : (\n          <Box padding={{horizontal: 24, vertical: 16}}>\n            <DaemonNotRunningAlertBody />\n          </Box>\n        )}\n        <BackfillTable\n          backfills={partitionBackfillsOrError.results.slice(0, PAGE_SIZE)}\n          refetch={queryResult.refetch}\n        />\n        {partitionBackfillsOrError.results.length > 0 ? (\n          <Box margin={{top: 16}}>\n            <CursorPaginationControls {...paginationProps} />\n          </Box>\n        ) : null}\n      </div>\n    );\n  };\n\n  return (\n    <Page>\n      <PageHeader\n        title={<Heading>Overview</Heading>}\n        tabs={<OverviewTabs tab=\"backfills\" refreshState={refreshState} />}\n      />\n      <Box padding={{vertical: 12, horizontal: 20}}>\n        <Box flex={{direction: 'column', gap: 8}}>\n          <div>{button}</div>\n          {activeFiltersJsx}\n        </Box>\n      </Box>\n      {content()}\n    </Page>\n  );\n};\n\nconst INSTANCE_HEALTH_FOR_BACKFILLS_QUERY = gql`\n  query InstanceHealthForBackfillsQuery {\n    instance {\n      id\n      ...InstanceHealthFragment\n    }\n  }\n\n  ${INSTANCE_HEALTH_FRAGMENT}\n`;\n\nconst BACKFILLS_QUERY = gql`\n  query InstanceBackfillsQuery($status: BulkActionStatus, $cursor: String, $limit: Int) {\n    partitionBackfillsOrError(status: $status, cursor: $cursor, limit: $limit) {\n      ... on PartitionBackfills {\n        results {\n          id\n          status\n          isValidSerialization\n          numPartitions\n          timestamp\n          partitionSetName\n          partitionSet {\n            id\n            name\n            mode\n            pipelineName\n            repositoryOrigin {\n              id\n              repositoryName\n              repositoryLocationName\n            }\n          }\n          error {\n            ...PythonErrorFragment\n          }\n\n          ...BackfillTableFragment\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n  ${BACKFILL_TABLE_FRAGMENT}\n`;\n","import {gql, useApolloClient, useQuery} from '@apollo/client';\nimport {\n  Box,\n  ButtonLink,\n  Colors,\n  Heading,\n  NonIdealState,\n  Page,\n  PageHeader,\n  Spinner,\n  Table,\n  Tag,\n} from '@dagster-io/ui-components';\nimport dayjs from 'dayjs';\nimport duration from 'dayjs/plugin/duration';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport {useEffect, useReducer} from 'react';\nimport {Link, useHistory, useParams} from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport {BACKFILL_ACTIONS_BACKFILL_FRAGMENT, BackfillActionsMenu} from './BackfillActionsMenu';\nimport {BackfillStatusTagForPage} from './BackfillStatusTagForPage';\nimport {TargetPartitionsDisplay} from './TargetPartitionsDisplay';\nimport {\n  BackfillPartitionsForAssetKeyQuery,\n  BackfillPartitionsForAssetKeyQueryVariables,\n  BackfillStatusesByAssetQuery,\n  BackfillStatusesByAssetQueryVariables,\n} from './types/BackfillPage.types';\nimport {PYTHON_ERROR_FRAGMENT} from '../../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../../app/PythonErrorInfo';\nimport {QueryRefreshCountdown, useQueryRefreshAtInterval} from '../../app/QueryRefresh';\nimport {useTrackPageView} from '../../app/analytics';\nimport {Timestamp} from '../../app/time/Timestamp';\nimport {tokenForAssetKey} from '../../asset-graph/Utils';\nimport {asAssetKeyInput} from '../../assets/asInput';\nimport {assetDetailsPathForKey} from '../../assets/assetDetailsPathForKey';\nimport {AssetViewParams} from '../../assets/types';\nimport {AssetKey, BulkActionStatus, RunStatus} from '../../graphql/types';\nimport {useDocumentTitle} from '../../hooks/useDocumentTitle';\nimport {RunFilterToken, runsPathWithFilters} from '../../runs/RunsFilterInput';\nimport {testId} from '../../testing/testId';\n\ndayjs.extend(duration);\ndayjs.extend(relativeTime);\n\nexport const BackfillPage = () => {\n  const client = useApolloClient();\n  const history = useHistory();\n  const {backfillId} = useParams<{backfillId: string}>();\n  useTrackPageView();\n  useDocumentTitle(`Backfill | ${backfillId}`);\n\n  const queryResult = useQuery<BackfillStatusesByAssetQuery, BackfillStatusesByAssetQueryVariables>(\n    BACKFILL_DETAILS_QUERY,\n    {variables: {backfillId}},\n  );\n\n  const {data} = queryResult;\n\n  const backfill =\n    data?.partitionBackfillOrError.__typename === 'PartitionBackfill'\n      ? data.partitionBackfillOrError\n      : null;\n\n  // for asset backfills, all of the requested runs have concluded in order for the status to be BulkActionStatus.COMPLETED\n  const isInProgress = backfill\n    ? [BulkActionStatus.REQUESTED, BulkActionStatus.CANCELING].includes(backfill.status)\n    : true;\n\n  const refreshState = useQueryRefreshAtInterval(queryResult, 10000, isInProgress);\n\n  function content() {\n    if (!data || !data.partitionBackfillOrError) {\n      return (\n        <Box padding={64} data-testid={testId('page-loading-indicator')}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      );\n    }\n    if (data.partitionBackfillOrError.__typename === 'PythonError') {\n      return <PythonErrorInfo error={data.partitionBackfillOrError} />;\n    }\n    if (data.partitionBackfillOrError.__typename === 'BackfillNotFoundError') {\n      return <NonIdealState icon=\"no-results\" title={data.partitionBackfillOrError.message} />;\n    }\n\n    const backfill = data.partitionBackfillOrError;\n\n    function getRunsUrl(status: 'inProgress' | 'complete' | 'failed' | 'targeted') {\n      const filters: RunFilterToken[] = [\n        {\n          token: 'tag',\n          value: `dagster/backfill=${backfillId}`,\n        },\n      ];\n      switch (status) {\n        case 'inProgress':\n          filters.push(\n            {\n              token: 'status',\n              value: RunStatus.STARTED,\n            },\n            {\n              token: 'status',\n              value: RunStatus.QUEUED,\n            },\n            {\n              token: 'status',\n              value: RunStatus.STARTING,\n            },\n            {\n              token: 'status',\n              value: RunStatus.CANCELING,\n            },\n            {\n              token: 'status',\n              value: RunStatus.NOT_STARTED,\n            },\n          );\n          break;\n        case 'complete':\n          filters.push({\n            token: 'status',\n            value: RunStatus.SUCCESS,\n          });\n          break;\n        case 'failed':\n          filters.push({\n            token: 'status',\n            value: RunStatus.FAILURE,\n          });\n          filters.push({\n            token: 'status',\n            value: RunStatus.CANCELED,\n          });\n          break;\n      }\n      return runsPathWithFilters(filters);\n    }\n\n    const onShowAssetDetails = async (assetKey: AssetKey, isPartitioned: boolean) => {\n      let params: AssetViewParams = {};\n\n      if (isPartitioned) {\n        const resp = await client.query<\n          BackfillPartitionsForAssetKeyQuery,\n          BackfillPartitionsForAssetKeyQueryVariables\n        >({\n          query: BACKFILL_PARTITIONS_FOR_ASSET_KEY_QUERY,\n          variables: {backfillId, assetKey: asAssetKeyInput(assetKey)},\n        });\n        const data =\n          resp.data.partitionBackfillOrError.__typename === 'PartitionBackfill'\n            ? resp.data.partitionBackfillOrError.partitionsTargetedForAssetKey\n            : null;\n\n        if (data && data.ranges?.length) {\n          params = {default_range: data.ranges.map((r) => `[${r.start}...${r.end}]`).join(',')};\n        }\n      }\n      return history.push(assetDetailsPathForKey(assetKey, params));\n    };\n\n    return (\n      <>\n        <Box\n          padding={24}\n          flex={{\n            direction: 'row',\n            justifyContent: 'space-between',\n            wrap: 'nowrap',\n            alignItems: 'center',\n          }}\n          data-testid={testId('backfill-page-details')}\n        >\n          <Detail\n            label=\"Created\"\n            detail={\n              <Timestamp\n                timestamp={{ms: Number(backfill.timestamp * 1000)}}\n                timeFormat={{showSeconds: true, showTimezone: false}}\n              />\n            }\n          />\n          <Detail\n            label=\"Duration\"\n            detail={\n              <Duration\n                start={backfill.timestamp * 1000}\n                end={backfill.endTimestamp ? backfill.endTimestamp * 1000 : null}\n              />\n            }\n          />\n          <Detail\n            label=\"Partition selection\"\n            detail={\n              <TargetPartitionsDisplay\n                targetPartitionCount={backfill.numPartitions || 0}\n                targetPartitions={backfill.assetBackfillData?.rootTargetedPartitions}\n              />\n            }\n          />\n          <Detail label=\"Status\" detail={<BackfillStatusTagForPage backfill={backfill} />} />\n        </Box>\n        <Table>\n          <thead>\n            <tr>\n              <th style={{width: '50%'}}>Asset name</th>\n              <th>\n                <Link to={getRunsUrl('targeted')}>Partitions targeted</Link>\n              </th>\n              <th>\n                <Link to={getRunsUrl('inProgress')}>In progress</Link>\n              </th>\n              <th>\n                <Link to={getRunsUrl('complete')}>Completed</Link>\n              </th>\n              <th>\n                <Link to={getRunsUrl('failed')}>Failed</Link>\n              </th>\n            </tr>\n          </thead>\n          <tbody>\n            {backfill.assetBackfillData?.assetBackfillStatuses.map((asset) => {\n              let targeted;\n              let inProgress;\n              let completed;\n              let failed;\n              if (asset.__typename === 'AssetPartitionsStatusCounts') {\n                targeted = asset.numPartitionsTargeted;\n                inProgress = asset.numPartitionsInProgress;\n                completed = asset.numPartitionsMaterialized;\n                failed = asset.numPartitionsFailed;\n              } else {\n                targeted = 1;\n                failed = asset.failed ? 1 : 0;\n                inProgress = asset.inProgress ? 1 : 0;\n                completed = asset.materialized ? 1 : 0;\n              }\n              return (\n                <tr\n                  key={tokenForAssetKey(asset.assetKey)}\n                  data-testid={testId(`backfill-asset-row-${tokenForAssetKey(asset.assetKey)}`)}\n                >\n                  <td>\n                    <Box flex={{direction: 'row', justifyContent: 'space-between'}}>\n                      <div>\n                        <ButtonLink\n                          onClick={() =>\n                            onShowAssetDetails(\n                              asset.assetKey,\n                              asset.__typename === 'AssetPartitionsStatusCounts',\n                            )\n                          }\n                        >\n                          {asset.assetKey.path.join('/')}\n                        </ButtonLink>\n                      </div>\n                      <div>\n                        <StatusBar\n                          targeted={targeted}\n                          inProgress={inProgress}\n                          completed={completed}\n                          failed={failed}\n                        />\n                      </div>\n                    </Box>\n                  </td>\n                  {asset.__typename === 'AssetPartitionsStatusCounts' ? (\n                    <>\n                      <td>{targeted}</td>\n                      <td>{inProgress}</td>\n                      <td>{completed}</td>\n                      <td>{failed}</td>\n                    </>\n                  ) : (\n                    <>\n                      <td>-</td>\n                      <td>\n                        {inProgress ? (\n                          <Tag icon=\"spinner\" intent=\"primary\">\n                            In progress\n                          </Tag>\n                        ) : (\n                          '-'\n                        )}\n                      </td>\n                      <td>{completed ? <Tag intent=\"success\">Completed</Tag> : '-'}</td>\n                      <td>{failed ? <Tag intent=\"danger\">Failed</Tag> : '-'}</td>\n                    </>\n                  )}\n                </tr>\n              );\n            })}\n          </tbody>\n        </Table>\n      </>\n    );\n  }\n\n  return (\n    <Page>\n      <PageHeader\n        title={\n          <Heading>\n            <Link to=\"/overview/backfills\" style={{color: Colors.textLight()}}>\n              Backfills\n            </Link>\n            {' / '}\n            {backfillId}\n          </Heading>\n        }\n        right={\n          <Box flex={{gap: 12, alignItems: 'center'}}>\n            {isInProgress ? <QueryRefreshCountdown refreshState={refreshState} /> : null}\n            {backfill ? (\n              <BackfillActionsMenu\n                backfill={backfill}\n                refetch={queryResult.refetch}\n                canCancelRuns={backfill.status === BulkActionStatus.REQUESTED}\n              />\n            ) : null}\n          </Box>\n        }\n      />\n      {content()}\n    </Page>\n  );\n};\n\nconst Detail = ({label, detail}: {label: JSX.Element | string; detail: JSX.Element | string}) => (\n  <Box flex={{direction: 'column', gap: 4}} style={{minWidth: '280px'}}>\n    <Label>{label}</Label>\n    <div>{detail}</div>\n  </Box>\n);\n\nfunction StatusBar({\n  targeted,\n  inProgress,\n  completed,\n  failed,\n}: {\n  targeted: number;\n  inProgress: number;\n  completed: number;\n  failed: number;\n}) {\n  return (\n    <div\n      style={{\n        borderRadius: '8px',\n        backgroundColor: Colors.backgroundLight(),\n        display: 'grid',\n        gridTemplateColumns: `${(100 * completed) / targeted}% ${(100 * failed) / targeted}% ${\n          (100 * inProgress) / targeted\n        }%`,\n        gridTemplateRows: '100%',\n        height: '12px',\n        width: '200px',\n        overflow: 'hidden',\n      }}\n    >\n      <div style={{background: Colors.accentGreen()}} />\n      <div style={{background: Colors.accentRed()}} />\n      <div style={{background: Colors.accentBlue()}} />\n    </div>\n  );\n}\n\nconst Label = styled.div`\n  color: ${Colors.textLight()};\n  font-size: 12px;\n  line-height: 16px;\n`;\n\nconst Duration = ({start, end}: {start: number; end?: number | null}) => {\n  const [_, rerender] = useReducer((s: number, _: any) => s + 1, 0);\n  useEffect(() => {\n    if (end) {\n      return;\n    }\n    // re-render once a minute to update the \"time ago\"\n    const intervalId = setInterval(rerender, 60000);\n    return () => clearInterval(intervalId);\n  }, [start, end]);\n  const duration = end ? end - start : Date.now() - start;\n\n  return <span>{formatDuration(duration)}</span>;\n};\n\nexport const BACKFILL_DETAILS_QUERY = gql`\n  query BackfillStatusesByAsset($backfillId: String!) {\n    partitionBackfillOrError(backfillId: $backfillId) {\n      ...PartitionBackfillFragment\n      ...PythonErrorFragment\n      ... on BackfillNotFoundError {\n        message\n      }\n    }\n  }\n\n  fragment PartitionBackfillFragment on PartitionBackfill {\n    id\n    status\n    timestamp\n    endTimestamp\n    numPartitions\n    ...BackfillActionsBackfillFragment\n\n    error {\n      ...PythonErrorFragment\n    }\n    assetBackfillData {\n      rootTargetedPartitions {\n        partitionKeys\n        ranges {\n          start\n          end\n        }\n      }\n      assetBackfillStatuses {\n        ... on AssetPartitionsStatusCounts {\n          assetKey {\n            path\n          }\n          numPartitionsTargeted\n          numPartitionsInProgress\n          numPartitionsMaterialized\n          numPartitionsFailed\n        }\n        ... on UnpartitionedAssetStatus {\n          assetKey {\n            path\n          }\n          inProgress\n          materialized\n          failed\n        }\n      }\n    }\n  }\n  ${PYTHON_ERROR_FRAGMENT}\n  ${BACKFILL_ACTIONS_BACKFILL_FRAGMENT}\n`;\n\nexport const BACKFILL_PARTITIONS_FOR_ASSET_KEY_QUERY = gql`\n  query BackfillPartitionsForAssetKey($backfillId: String!, $assetKey: AssetKeyInput!) {\n    partitionBackfillOrError(backfillId: $backfillId) {\n      ... on PartitionBackfill {\n        id\n        partitionsTargetedForAssetKey(assetKey: $assetKey) {\n          partitionKeys\n          ranges {\n            start\n            end\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst formatDuration = (duration: number) => {\n  const seconds = Math.floor((duration / 1000) % 60);\n  const minutes = Math.floor((duration / (1000 * 60)) % 60);\n  const hours = Math.floor((duration / (1000 * 60 * 60)) % 24);\n  const days = Math.floor(duration / (1000 * 60 * 60 * 24));\n\n  let result = '';\n  if (days > 0) {\n    result += `${days}d `;\n    result += `${hours}h`;\n  } else if (hours > 0) {\n    result += `${hours}h `;\n    result += `${minutes}m`;\n  } else if (minutes > 0) {\n    result += `${minutes}m `;\n    result += `${seconds}s`;\n  }\n  return result.trim();\n};\n","import {Redirect, Route, Switch} from 'react-router-dom';\n\nimport {OverviewActivityRoot} from './OverviewActivityRoot';\nimport {OverviewJobsRoot} from './OverviewJobsRoot';\nimport {OverviewResourcesRoot} from './OverviewResourcesRoot';\nimport {OverviewSchedulesRoot} from './OverviewSchedulesRoot';\nimport {OverviewSensorsRoot} from './OverviewSensorsRoot';\nimport {AutomaterializationRoot} from '../assets/auto-materialization/AutomaterializationRoot';\nimport {InstanceBackfills} from '../instance/InstanceBackfills';\nimport {BackfillPage} from '../instance/backfill/BackfillPage';\n\nexport const OverviewRoot = () => {\n  return (\n    <Switch>\n      <Route path=\"/overview/activity\">\n        <OverviewActivityRoot />\n      </Route>\n      <Route path=\"/overview/jobs\">\n        <OverviewJobsRoot />\n      </Route>\n      <Route path=\"/overview/schedules\">\n        <OverviewSchedulesRoot />\n      </Route>\n      <Route path=\"/overview/sensors\">\n        <OverviewSensorsRoot />\n      </Route>\n      <Route path=\"/overview/automation\">\n        <AutomaterializationRoot />\n      </Route>\n      <Route path=\"/overview/backfills/:backfillId\">\n        <BackfillPage />\n      </Route>\n      <Route path=\"/overview/backfills\" exact>\n        <InstanceBackfills />\n      </Route>\n      <Route path=\"/overview/resources\">\n        <OverviewResourcesRoot />\n      </Route>\n      <Route path=\"*\" render={() => <Redirect to=\"/overview/activity\" />} />\n    </Switch>\n  );\n};\n\n// Imported via React.lazy, which requires a default export.\n// eslint-disable-next-line import/no-default-export\nexport default OverviewRoot;\n"],"names":["_obj","OverviewAssetsRoot","param","query","result","Header","TabButton","useTrackPageView","useDocumentTitle","useQuery","ASSET_CATALOG_TABLE_QUERY","notifyOnNetworkStatusChange","refreshState","useQueryRefreshAtInterval","FIFTEEN_SECONDS","groupedAssetsUnfiltered","React","assets","groups","data","assetsOrError","__typename","nodes","forEach","asset","definition","groupName","repositoryName","repository","name","key","concat","target","push","Object","values","useQueryPersistedState","queryKey","decode","qs","searchQuery","JSON","parse","encode","stringify","undefined","searchValue","setSearchValue","groupedAssets","filter","group","UNGROUPED_ASSETS","toLowerCase","includes","parentRef","rowVirtualizer","useVirtualizer","count","length","getScrollElement","current","estimateSize","overscan","totalHeight","getTotalSize","items","getVirtualItems","jsx_runtime","jsxs","Fragment","div","style","position","top","zIndex","jsx","Box","padding","horizontal","vertical","flex","alignItems","gap","grow","selected","TextInput","value","onChange","e","placeholder","loading","justifyContent","direction","width","Spinner","purpose","PythonErrorInfo","error","overflow","Container","ref","VirtualHeaderRow","Inner","$totalHeight","map","index","size","start","VirtualRow","height","TEMPLATE_COLUMNS","border","display","gridTemplateColumns","fontSize","color","Colors","background","HeaderCell","assetKeys","path","liveDataByNode","useAssetsLiveData","statuses","groupAssetsByStatus","repo","find","repoAddress","buildRepoAddress","location","useViewport","containerProps","viewport","isBatchStillLoading","keys","zeroOrBlank","Row","$height","$start","RowGrid","Cell","Icon","Link","fontWeight","to","workspacePathFromAddress","RepositoryLinkWrapper","maxWidth","RepositoryLink","showRefresh","missing","SelectOnHover","getCount","status","case","StatusCase","PARTITIONS_MISSING","numMissing","adjective","Tag","intent","borderRadius","failed","PARTITIONS_FAILED","numFailed","borderLeft","borderRight","borderBottom","inprogress","MATERIALIZING","numMaterializing","icon","successful","PARTITIONS_MATERIALIZED","numMaterialized","backgroundColor","styled","children","RowCell","withConfig","SelectWrapper","Select","itemPredicate","item","displayNameForAssetKey","toLocaleLowerCase","itemRenderer","LinkWithNoUnderline","assetDetailsPathForKey","MenuItem","text","paddingLeft","whiteSpace","textOverflow","Caption","partitionCountString","onItemSelect","OverviewTabs","props","tab","automaterialize","useAutomaterializeDaemonStatus","automaterializeSensorsFlagState","useAutoMaterializeSensorFlag","Tabs","selectedTabId","TabLink","id","title","paused","bottom","QueryRefreshCountdown","RepoFilterButton","useContext","WorkspaceContext","allRepos","visibleRepos","toggleVisible","useState","open","setOpen","Dialog","canOutsideClickClose","canEscapeKeyClose","isOpen","onClose","DialogHeader","label","RepoSelector","options","onBrowse","onToggle","DialogFooter","Button","onClick","outlined","rightIcon","useHourWindow","defaultValue","validate","useCallback","useStateWithStorage","hourWindow","setHourWindow","setHourWindowWithDefault","useMemo","SCHEDULE_FUTURE_TICKS_FRAGMENT","gql","useRunsForTimeline","range","runsFilter","end","startSec","endSec","queryData","RUN_TIMELINE_QUERY","fetchPolicy","variables","inProgressFilter","_object_spread_props","_","_object_spread","RunStatus","CANCELING","STARTED","createdBefore","terminatedFilter","Array","from","doneStatuses","updatedAfter","tickCursor","ticksUntil","previousData","initialLoading","unterminated","terminated","workspaceOrError","runsByJobKey","now","Date","_to_consumable_array","results","run","startTime","repositoryOrigin","overlap","endTime","runJobKey","makeJobKey","repositoryLocationName","pipelineName","jobsWithRuns","jobs","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","locationEntries","Symbol","iterator","next","done","_loop","locationEntry","locationOrLoadError","_step1","repositories","pipelines","pipeline","schedules","schedule","jobTicks","scheduleState","InstigationStatus","RUNNING","futureTicks","timestamp","err","return","isAdHoc","isHiddenAssetGroupJob","jobKey","jobName","jobRuns","jobsAndTicksToAdd","adHocJobs","job","jobType","runs","workspacePipelinePath","repoName","repoLocation","isJob","earliest","reduce","accum","Math","startTimes","_define_property","min","sort","a","b","repoAddressAsHumanString","RUN_TIME_FRAGMENT","hourWindowToOffset","OverviewTimelineRoot","trace","usePageLoadTrace","setNow","offsetMsec","setOffsetMsec","defaults","search","timer","setInterval","clearInterval","onPageEarlier","onPageLater","onPageNow","Number","LOOKAHEAD_HOURS","endTrace","visibleJobKeys","searchLower","trim","flat","flatMap","repositoryLocation","Set","visibleJobs","has","ButtonGroup","activeItems","buttons","hrWindow","ErrorBoundary","region","RunTimeline","OverviewActivityRoot","header","PageHeader","Heading","tabs","json","defaultTab","setDefaultTab","tabButton","JoinedButtons","ActivatableButton","$active","Switch","Route","render","Redirect","OverviewJobsTable","repos","useRef","allKeys","useRepoExpansionState","OVERVIEW_COLLAPSED_KEY","expandedKeys","onToggleAll","flattened","type","jobCount","repoKey","duplicateRepoNames","findDuplicateRepoNames","ii","row","VirtualizedJobHeader","RepoRow","expanded","showLocation","rightElement","Tooltip","content","placement","VirtualizedJobRow","sortRepoBuckets","buckets","aString","bString","localeCompare","visibleRepoKeys","option","useDelayedState","delayMsec","setValue","useEffect","setTimeout","clearTimeout","SearchInputSpinner","tooltipContent","margin","canShow","OverviewJobsRoot","repoCount","queryResultOverview","OVERVIEW_JOBS_QUERY","repoBuckets","visibleKeys","buildBuckets","sanitizedSearch","anySearch","filteredBySearch","searchToLower","showSearchSpinner","workspaceLoading","paddingTop","anyReposHidden","NonIdealState","description","strong","entries","entry","_iteratorNormalCompletion1","_didIteratorError1","_iteratorError1","_iterator1","PYTHON_ERROR_FRAGMENT","OverviewResourcesTable","resources","resourceCount","resource","VirtualizedResourceHeader","VirtualizedResourceRow","OverviewResourcesRoot","OVERVIEW_RESOURCES_QUERY","allTopLevelResourceDetails","RESOURCE_ENTRY_FRAGMENT","OverviewScheduleTable","headerCheckbox","checkedKeys","onToggleCheckFactory","scheduleCount","VirtualizedScheduleHeader","checkbox","scheduleKey","makeScheduleKey","VirtualizedScheduleRow","showCheckboxColumn","checked","onToggleChecked","OverviewSchedulesRoot","codeLocationFilter","useCodeLocationFilter","runningStateFilter","useInstigationStatusFilter","filters","useFilters","button","activeFiltersJsx","OVERVIEW_SCHEDULES_QUERY","state","filteredBuckets","_param","rest","runningState","anySchedulesVisible","some","allPermissionedSchedules","filterPermissionedInstigationState","scheduleName","allPermissionedScheduleKeys","useSelectionReducer","checkedIds","onToggleFactory","permissionedKeysOnScreen","filteredKeys","checkedSchedules","checkedKeysOnScreen","viewerHasAnyInstigationPermission","checkedCount","filterButton","useDisabledButtonTooltipFix","ScheduleBulkActionMenu","onDone","refetch","SchedulerInfo","daemonHealth","instance","CheckAllBox","totalCount","scheduleNames","BASIC_INSTIGATION_STATE_FRAGMENT","INSTANCE_HEALTH_FRAGMENT","OverviewSensorTable","sensors","sensorCount","sensor","VirtualizedSensorHeader","sensorKey","makeSensorKey","VirtualizedSensorRow","sensorState","toSetFilterValue","SENSOR_TYPE_META","match","SENSOR_TYPE_TO_FILTER","SensorType","ASSET","AUTO_MATERIALIZE","FRESHNESS_POLICY","MULTI_ASSET","RUN_STATUS","STANDARD","ALL_SENSOR_TYPE_FILTERS","OverviewSensorsRoot","sensorTypes","setSensorTypes","sensorTypeFilter","useStaticSetFilter","allValues","getStringValue","renderLabel","span","onStateChanged","OVERVIEW_SENSORS_QUERY","sensorType","anySensorsVisible","allPermissionedSensors","sensorName","allPermissionedSensorKeys","checkedSensors","SensorBulkActionMenu","SensorInfo","InstanceAutomaterializationEvaluationHistoryTable","queryResult","setSelectedTick","setTableView","setTimerange","setParentStatuses","InstigationTickStatus","SUCCESS","FAILURE","SKIPPED","raw","setStatuses","useCursorPaginatedQuery","ASSET_DAEMON_TICKS_QUERY","nextCursorForResult","ticks","autoMaterializeTicks","PAGE_SIZE","getResultArray","pageSize","paginationProps","hasPrevCursor","endTimestamp","AutomaterializationEvaluationHistoryTable","AutomaterializationRoot","GlobalAutomaterializationRoot","assertUnreachable","fetchData","fetch","confirm","useConfirmation","tmp","useUnscopedPermissions","permissions","canToggleAutoMaterialize","useLazyQuery","isPaused","setIsPaused","timeRange","afterTimestamp","beforeTimestamp","TWENTY_MINUTES","useLayoutEffect","selectedTick","view","cursor","tableView","ids","tick","nextTick","isStuckStartedTick","copy","slice","onHoverTick","Page","Alert","href","rel","Table","tbody","tr","td","Checkbox","format","disabled","_async_to_generator","_state","sent","setPaused","Subtitle2","LiveTickTimeline","onSelectTick","exactRange","tickGrid","timeAfter","AutomaterializationTickDetailDialog","close","AutomaterializeRunHistoryTable","labelForBackfillStatus","BulkActionStatus","CANCELED","COMPLETED","FAILED","REQUESTED","backfillStatusValues","InstanceBackfills","INSTANCE_HEALTH_FOR_BACKFILLS_QUERY","statusFilter","allowMultipleSelections","closeOnSelect","BACKFILLS_QUERY","statusState","partitionBackfillsOrError","backfillHealths","daemonHealths","allDaemonStatuses","daemon","daemonType","required","healthy","isBackfillHealthy","every","x","DaemonNotRunningAlertBody","BackfillTable","backfills","CursorPaginationControls","BACKFILL_TABLE_FRAGMENT","dayjs","duration","relativeTime","BackfillPage","client","useApolloClient","history","useHistory","backfillId","useParams","BACKFILL_DETAILS_QUERY","backfill","partitionBackfillOrError","isInProgress","right","BackfillActionsMenu","canCancelRuns","data-testid","testId","message","getRunsUrl","token","QUEUED","STARTING","NOT_STARTED","runsPathWithFilters","onShowAssetDetails","assetKey","isPartitioned","params","resp","BACKFILL_PARTITIONS_FOR_ASSET_KEY_QUERY","asAssetKeyInput","partitionsTargetedForAssetKey","ranges","default_range","r","join","wrap","Detail","detail","Timestamp","ms","timeFormat","showSeconds","showTimezone","Duration","TargetPartitionsDisplay","targetPartitionCount","numPartitions","targetPartitions","assetBackfillData","rootTargetedPartitions","BackfillStatusTagForPage","thead","th","assetBackfillStatuses","targeted","inProgress","completed","numPartitionsTargeted","numPartitionsInProgress","numPartitionsMaterialized","numPartitionsFailed","materialized","tokenForAssetKey","ButtonLink","StatusBar","minWidth","Label","gridTemplateRows","useReducer","s","rerender","intervalId","formatDuration","BACKFILL_ACTIONS_BACKFILL_FRAGMENT","minutes","floor","hours","days","OverviewRoot","exact","overview_OverviewRoot"],"sourceRoot":""}